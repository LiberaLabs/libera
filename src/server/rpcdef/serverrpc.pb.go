// Code generated by protoc-gen-go.
// source: serverrpc.proto
// DO NOT EDIT!

/*
Package serversvc is a generated protocol buffer package.

It is generated from these files:
	serverrpc.proto

It has these top-level messages:
	ErrorData
	ServerSvcStatusRequest
	ServerSvcStatusResponse
	SessionInfo
	Session
	Person
	Instructor
	User
	GetSessionsRequest
	GetSessionsReply
	PostSessionRequest
	PostSessionReply
	EnrollInstructorRequest
	EnrollInstructorResponse
	EnrollUserRequest
	EnrollUserResponse
*/
package serversvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorData struct {
	ErrorCode string `protobuf:"bytes,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorStr  string `protobuf:"bytes,2,opt,name=errorStr" json:"errorStr,omitempty"`
}

func (m *ErrorData) Reset()                    { *m = ErrorData{} }
func (m *ErrorData) String() string            { return proto.CompactTextString(m) }
func (*ErrorData) ProtoMessage()               {}
func (*ErrorData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ErrorData) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *ErrorData) GetErrorStr() string {
	if m != nil {
		return m.ErrorStr
	}
	return ""
}

type ServerSvcStatusRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ServerSvcStatusRequest) Reset()                    { *m = ServerSvcStatusRequest{} }
func (m *ServerSvcStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusRequest) ProtoMessage()               {}
func (*ServerSvcStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerSvcStatusRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ServerSvcStatusResponse struct {
	ErrData *ErrorData `protobuf:"bytes,1,opt,name=errData" json:"errData,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ServerSvcStatusResponse) Reset()                    { *m = ServerSvcStatusResponse{} }
func (m *ServerSvcStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusResponse) ProtoMessage()               {}
func (*ServerSvcStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerSvcStatusResponse) GetErrData() *ErrorData {
	if m != nil {
		return m.ErrData
	}
	return nil
}

func (m *ServerSvcStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SessionInfo struct {
	SessionTime  string `protobuf:"bytes,1,opt,name=sessionTime" json:"sessionTime,omitempty"`
	SessionDesc  string `protobuf:"bytes,2,opt,name=sessionDesc" json:"sessionDesc,omitempty"`
	InstructorID string `protobuf:"bytes,3,opt,name=instructorID" json:"instructorID,omitempty"`
	SessionType  string `protobuf:"bytes,4,opt,name=sessionType" json:"sessionType,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SessionInfo) GetSessionTime() string {
	if m != nil {
		return m.SessionTime
	}
	return ""
}

func (m *SessionInfo) GetSessionDesc() string {
	if m != nil {
		return m.SessionDesc
	}
	return ""
}

func (m *SessionInfo) GetInstructorID() string {
	if m != nil {
		return m.InstructorID
	}
	return ""
}

func (m *SessionInfo) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

type Session struct {
	Info                 *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	SessionUsersEnrolled uint64       `protobuf:"varint,2,opt,name=sessionUsersEnrolled" json:"sessionUsersEnrolled,omitempty"`
	// ID isn't during request
	// XXX This has to be modeled properly
	ID string `protobuf:"bytes,3,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Session) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Session) GetSessionUsersEnrolled() uint64 {
	if m != nil {
		return m.SessionUsersEnrolled
	}
	return 0
}

func (m *Session) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Person struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age      string `protobuf:"bytes,2,opt,name=age" json:"age,omitempty"`
	Sex      string `protobuf:"bytes,3,opt,name=sex" json:"sex,omitempty"`
	Location string `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *Person) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Person) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type Instructor struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
	ID     string  `protobuf:"bytes,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	Rating float32 `protobuf:"fixed32,3,opt,name=rating" json:"rating,omitempty"`
}

func (m *Instructor) Reset()                    { *m = Instructor{} }
func (m *Instructor) String() string            { return proto.CompactTextString(m) }
func (*Instructor) ProtoMessage()               {}
func (*Instructor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Instructor) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *Instructor) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Instructor) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type User struct {
	Person     *Person  `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
	ID         string   `protobuf:"bytes,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	FriendsIDs []string `protobuf:"bytes,3,rep,name=friendsIDs" json:"friendsIDs,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *User) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetFriendsIDs() []string {
	if m != nil {
		return m.FriendsIDs
	}
	return nil
}

type GetSessionsRequest struct {
	// If specified, only show sessions of this type.
	SessionType string `protobuf:"bytes,1,opt,name=sessionType" json:"sessionType,omitempty"`
}

func (m *GetSessionsRequest) Reset()                    { *m = GetSessionsRequest{} }
func (m *GetSessionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsRequest) ProtoMessage()               {}
func (*GetSessionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetSessionsRequest) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

type GetSessionsReply struct {
	ErrData *ErrorData `protobuf:"bytes,1,opt,name=errData" json:"errData,omitempty"`
	Session []*Session `protobuf:"bytes,2,rep,name=session" json:"session,omitempty"`
}

func (m *GetSessionsReply) Reset()                    { *m = GetSessionsReply{} }
func (m *GetSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsReply) ProtoMessage()               {}
func (*GetSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetSessionsReply) GetErrData() *ErrorData {
	if m != nil {
		return m.ErrData
	}
	return nil
}

func (m *GetSessionsReply) GetSession() []*Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type PostSessionRequest struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *PostSessionRequest) Reset()                    { *m = PostSessionRequest{} }
func (m *PostSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSessionRequest) ProtoMessage()               {}
func (*PostSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PostSessionRequest) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type PostSessionReply struct {
	ErrData *ErrorData `protobuf:"bytes,1,opt,name=errData" json:"errData,omitempty"`
}

func (m *PostSessionReply) Reset()                    { *m = PostSessionReply{} }
func (m *PostSessionReply) String() string            { return proto.CompactTextString(m) }
func (*PostSessionReply) ProtoMessage()               {}
func (*PostSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PostSessionReply) GetErrData() *ErrorData {
	if m != nil {
		return m.ErrData
	}
	return nil
}

type EnrollInstructorRequest struct {
	Instructor *Person `protobuf:"bytes,1,opt,name=instructor" json:"instructor,omitempty"`
}

func (m *EnrollInstructorRequest) Reset()                    { *m = EnrollInstructorRequest{} }
func (m *EnrollInstructorRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorRequest) ProtoMessage()               {}
func (*EnrollInstructorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EnrollInstructorRequest) GetInstructor() *Person {
	if m != nil {
		return m.Instructor
	}
	return nil
}

type EnrollInstructorResponse struct {
	ErrData *ErrorData `protobuf:"bytes,1,opt,name=errData" json:"errData,omitempty"`
}

func (m *EnrollInstructorResponse) Reset()                    { *m = EnrollInstructorResponse{} }
func (m *EnrollInstructorResponse) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorResponse) ProtoMessage()               {}
func (*EnrollInstructorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EnrollInstructorResponse) GetErrData() *ErrorData {
	if m != nil {
		return m.ErrData
	}
	return nil
}

type EnrollUserRequest struct {
	User *Person `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *EnrollUserRequest) Reset()                    { *m = EnrollUserRequest{} }
func (m *EnrollUserRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserRequest) ProtoMessage()               {}
func (*EnrollUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EnrollUserRequest) GetUser() *Person {
	if m != nil {
		return m.User
	}
	return nil
}

type EnrollUserResponse struct {
	ErrData *ErrorData `protobuf:"bytes,1,opt,name=errData" json:"errData,omitempty"`
}

func (m *EnrollUserResponse) Reset()                    { *m = EnrollUserResponse{} }
func (m *EnrollUserResponse) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserResponse) ProtoMessage()               {}
func (*EnrollUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EnrollUserResponse) GetErrData() *ErrorData {
	if m != nil {
		return m.ErrData
	}
	return nil
}

func init() {
	proto.RegisterType((*ErrorData)(nil), "serversvc.ErrorData")
	proto.RegisterType((*ServerSvcStatusRequest)(nil), "serversvc.ServerSvcStatusRequest")
	proto.RegisterType((*ServerSvcStatusResponse)(nil), "serversvc.ServerSvcStatusResponse")
	proto.RegisterType((*SessionInfo)(nil), "serversvc.SessionInfo")
	proto.RegisterType((*Session)(nil), "serversvc.Session")
	proto.RegisterType((*Person)(nil), "serversvc.Person")
	proto.RegisterType((*Instructor)(nil), "serversvc.Instructor")
	proto.RegisterType((*User)(nil), "serversvc.User")
	proto.RegisterType((*GetSessionsRequest)(nil), "serversvc.GetSessionsRequest")
	proto.RegisterType((*GetSessionsReply)(nil), "serversvc.GetSessionsReply")
	proto.RegisterType((*PostSessionRequest)(nil), "serversvc.PostSessionRequest")
	proto.RegisterType((*PostSessionReply)(nil), "serversvc.PostSessionReply")
	proto.RegisterType((*EnrollInstructorRequest)(nil), "serversvc.EnrollInstructorRequest")
	proto.RegisterType((*EnrollInstructorResponse)(nil), "serversvc.EnrollInstructorResponse")
	proto.RegisterType((*EnrollUserRequest)(nil), "serversvc.EnrollUserRequest")
	proto.RegisterType((*EnrollUserResponse)(nil), "serversvc.EnrollUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerSvc service

type ServerSvcClient interface {
	// Sends a greeting
	GetStatus(ctx context.Context, in *ServerSvcStatusRequest, opts ...grpc.CallOption) (*ServerSvcStatusResponse, error)
	// Session handling
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error)
	PostSession(ctx context.Context, in *PostSessionRequest, opts ...grpc.CallOption) (*PostSessionReply, error)
	// Instructor handling
	EnrollInstructor(ctx context.Context, in *EnrollInstructorRequest, opts ...grpc.CallOption) (*EnrollInstructorResponse, error)
	// User handling
	EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error)
}

type serverSvcClient struct {
	cc *grpc.ClientConn
}

func NewServerSvcClient(cc *grpc.ClientConn) ServerSvcClient {
	return &serverSvcClient{cc}
}

func (c *serverSvcClient) GetStatus(ctx context.Context, in *ServerSvcStatusRequest, opts ...grpc.CallOption) (*ServerSvcStatusResponse, error) {
	out := new(ServerSvcStatusResponse)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error) {
	out := new(GetSessionsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) PostSession(ctx context.Context, in *PostSessionRequest, opts ...grpc.CallOption) (*PostSessionReply, error) {
	out := new(PostSessionReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/PostSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollInstructor(ctx context.Context, in *EnrollInstructorRequest, opts ...grpc.CallOption) (*EnrollInstructorResponse, error) {
	out := new(EnrollInstructorResponse)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error) {
	out := new(EnrollUserResponse)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerSvc service

type ServerSvcServer interface {
	// Sends a greeting
	GetStatus(context.Context, *ServerSvcStatusRequest) (*ServerSvcStatusResponse, error)
	// Session handling
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsReply, error)
	PostSession(context.Context, *PostSessionRequest) (*PostSessionReply, error)
	// Instructor handling
	EnrollInstructor(context.Context, *EnrollInstructorRequest) (*EnrollInstructorResponse, error)
	// User handling
	EnrollUser(context.Context, *EnrollUserRequest) (*EnrollUserResponse, error)
}

func RegisterServerSvcServer(s *grpc.Server, srv ServerSvcServer) {
	s.RegisterService(&_ServerSvc_serviceDesc, srv)
}

func _ServerSvc_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerSvcStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetStatus(ctx, req.(*ServerSvcStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_PostSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).PostSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/PostSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).PostSession(ctx, req.(*PostSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollInstructorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, req.(*EnrollInstructorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollUser(ctx, req.(*EnrollUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serversvc.ServerSvc",
	HandlerType: (*ServerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ServerSvc_GetStatus_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ServerSvc_GetSessions_Handler,
		},
		{
			MethodName: "PostSession",
			Handler:    _ServerSvc_PostSession_Handler,
		},
		{
			MethodName: "EnrollInstructor",
			Handler:    _ServerSvc_EnrollInstructor_Handler,
		},
		{
			MethodName: "EnrollUser",
			Handler:    _ServerSvc_EnrollUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverrpc.proto",
}

func init() { proto.RegisterFile("serverrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xa6, 0x6d, 0xd4, 0x92, 0x2b, 0x82, 0xee, 0x34, 0x75, 0x51, 0xd9, 0xd0, 0x30, 0x42, 0x02,
	0x34, 0x55, 0xa2, 0x48, 0x3c, 0xf0, 0x84, 0x20, 0x15, 0x2a, 0xf0, 0x30, 0xa5, 0xe3, 0x0d, 0x84,
	0x42, 0xea, 0x4d, 0x91, 0xba, 0x38, 0xd8, 0x69, 0x45, 0x7f, 0x09, 0x3f, 0x81, 0xbf, 0x89, 0xe3,
	0xd8, 0xa9, 0xd3, 0xb4, 0x93, 0xd6, 0xbd, 0xf9, 0xee, 0x3e, 0x7f, 0xf7, 0x5d, 0xee, 0xab, 0x0b,
	0x8f, 0x04, 0xe5, 0x4b, 0xca, 0x79, 0x1a, 0x0d, 0x53, 0xce, 0x32, 0x86, 0x6e, 0x91, 0x10, 0xcb,
	0x88, 0x8c, 0xc1, 0x1d, 0x73, 0xce, 0xb8, 0x1f, 0x66, 0x21, 0x1e, 0x83, 0x4b, 0xf3, 0xe0, 0x23,
	0x9b, 0x51, 0xaf, 0x71, 0xda, 0x78, 0xe1, 0x06, 0xeb, 0x04, 0x0e, 0xe0, 0xbe, 0x0a, 0xa6, 0x19,
	0xf7, 0x9a, 0xaa, 0x58, 0xc6, 0xe4, 0x0c, 0xfa, 0x53, 0xc5, 0x39, 0x5d, 0x46, 0xd3, 0x2c, 0xcc,
	0x16, 0x22, 0xa0, 0xbf, 0x17, 0x54, 0x64, 0x88, 0xe0, 0x24, 0xe1, 0xb5, 0xa1, 0x53, 0x67, 0x12,
	0xc1, 0x51, 0x0d, 0x2d, 0x52, 0x96, 0x08, 0x8a, 0x43, 0xe8, 0x48, 0xd2, 0x5c, 0x8d, 0xba, 0xd1,
	0x1d, 0x1d, 0x0e, 0x4b, 0xb1, 0xc3, 0x52, 0x69, 0x60, 0x40, 0xe8, 0x41, 0xe7, 0x9a, 0x0a, 0x11,
	0x5e, 0x51, 0xad, 0xc9, 0x84, 0xe4, 0x6f, 0x03, 0xba, 0x53, 0x79, 0x8e, 0x59, 0x32, 0x49, 0x2e,
	0x19, 0x9e, 0x42, 0x57, 0x14, 0xe1, 0x45, 0x5c, 0xea, 0xb1, 0x53, 0x16, 0xc2, 0xa7, 0x22, 0xd2,
	0x7c, 0x76, 0x0a, 0x09, 0x3c, 0x88, 0x13, 0x91, 0xf1, 0x45, 0x94, 0x31, 0x3e, 0xf1, 0xbd, 0x96,
	0x82, 0x54, 0x72, 0x76, 0x9f, 0x55, 0x4a, 0x3d, 0xa7, 0xda, 0x47, 0xa6, 0xc8, 0x0a, 0x3a, 0x5a,
	0x18, 0xbe, 0x02, 0x27, 0x96, 0xe2, 0xf4, 0xac, 0x7d, 0x6b, 0x56, 0x4b, 0x7a, 0xa0, 0x30, 0x38,
	0x82, 0x43, 0xcd, 0xf2, 0x4d, 0xc2, 0xc4, 0x38, 0xe1, 0x6c, 0x3e, 0xa7, 0x33, 0xa5, 0xd3, 0x09,
	0xb6, 0xd6, 0xf0, 0x21, 0x34, 0x4b, 0x99, 0xcd, 0xd8, 0x27, 0xdf, 0xa1, 0x7d, 0x2e, 0xeb, 0xb2,
	0xf3, 0x96, 0xbd, 0x60, 0x0f, 0x5a, 0xeb, 0x0f, 0x99, 0x1f, 0xf3, 0x8c, 0xa0, 0x7f, 0x34, 0x41,
	0x7e, 0xcc, 0x5d, 0x30, 0x67, 0x51, 0x98, 0xc9, 0x56, 0x7a, 0xb6, 0x32, 0x26, 0x3f, 0x01, 0x26,
	0xe5, 0xa7, 0xc0, 0x97, 0xd0, 0x4e, 0x55, 0x2f, 0x3d, 0xdd, 0x81, 0x35, 0x5d, 0x21, 0x22, 0xd0,
	0x00, 0x2d, 0xb3, 0x69, 0x64, 0x62, 0x1f, 0xda, 0x5c, 0x52, 0x26, 0x57, 0xaa, 0x73, 0x33, 0xd0,
	0x11, 0x09, 0xc1, 0xc9, 0xe7, 0xbb, 0x0b, 0xf5, 0x13, 0x80, 0x4b, 0x1e, 0xd3, 0x64, 0x26, 0x26,
	0xbe, 0x90, 0xf4, 0x2d, 0x99, 0xb7, 0x32, 0xe4, 0x2d, 0xe0, 0x27, 0x9a, 0xe9, 0xaf, 0x5f, 0xba,
	0x78, 0x63, 0xa9, 0x8d, 0xfa, 0x52, 0x53, 0xe8, 0x55, 0xee, 0xa5, 0xf3, 0xd5, 0xad, 0xcd, 0x7c,
	0x06, 0x1d, 0x4d, 0x29, 0x05, 0xb7, 0x24, 0x1e, 0xeb, 0x86, 0x08, 0x0c, 0x84, 0xbc, 0x07, 0x3c,
	0x67, 0xc2, 0xb4, 0x34, 0x4a, 0x6f, 0xe1, 0x28, 0xf2, 0x01, 0x7a, 0x15, 0x86, 0x3d, 0x34, 0x93,
	0xaf, 0x70, 0x54, 0xb8, 0x6d, 0xbd, 0x79, 0x23, 0xe5, 0x35, 0xc0, 0xfa, 0x97, 0xb1, 0x7b, 0x53,
	0x16, 0x88, 0x7c, 0x06, 0xaf, 0xce, 0xb6, 0xdf, 0xd3, 0x40, 0xde, 0xc1, 0x41, 0xc1, 0x95, 0x5b,
	0xc6, 0x68, 0x7a, 0x0e, 0xce, 0x42, 0x86, 0xbb, 0xd5, 0xa8, 0x32, 0xf1, 0x01, 0xed, 0xbb, 0xfb,
	0x29, 0x18, 0xfd, 0x6b, 0x81, 0x5b, 0x3e, 0x74, 0x78, 0x01, 0x6e, 0xee, 0x10, 0xf5, 0xde, 0xe1,
	0xd3, 0xca, 0x62, 0xb6, 0xbd, 0x9c, 0x03, 0x72, 0x13, 0xa4, 0x50, 0x44, 0xee, 0xe1, 0x17, 0xe8,
	0x5a, 0xbe, 0xc3, 0x13, 0xeb, 0x52, 0xdd, 0xc7, 0x83, 0xc7, 0xbb, 0xca, 0x72, 0xf5, 0x05, 0x99,
	0x65, 0x88, 0x0a, 0x59, 0xdd, 0x6a, 0x15, 0xb2, 0x4d, 0x1f, 0x49, 0xb2, 0x1f, 0xd0, 0xdb, 0xdc,
	0x25, 0xda, 0x33, 0xed, 0xb0, 0xcd, 0xe0, 0xd9, 0x8d, 0x18, 0x6b, 0x70, 0x58, 0xaf, 0x08, 0x8f,
	0x6b, 0x97, 0xac, 0xad, 0x0f, 0x4e, 0x76, 0x54, 0x0d, 0xd9, 0xaf, 0xb6, 0xfa, 0x63, 0x7c, 0xf3,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x6f, 0x91, 0xef, 0x2b, 0x07, 0x00, 0x00,
}
