// Code generated by protoc-gen-go.
// source: serverrpc.proto
// DO NOT EDIT!

/*
Package serversvc is a generated protocol buffer package.

It is generated from these files:
	serverrpc.proto

It has these top-level messages:
	ServerSvcStatusReq
	ServerSvcStatusReply
	SessionUsers
	SessionInfo
	Review
	InstructorReview
	CreditCard
	UserCreditCard
	BankAcct
	InstructorBankAcct
	InstructorInfo
	Device
	UserDevice
	UserInfo
	UserFriend
	UserFollow
	GetSessionsReq
	GetSessionsReply
	GetSessionReply
	GetSessionReq
	PostSessionReq
	PostSessionReply
	EnrollInstructorReq
	EnrollInstructorReply
	GetInstructorReq
	GetInstructorReply
	GetInstructorsReq
	GetInstructorsReply
	GetUserReq
	GetUserReply
	EnrollUserReq
	EnrollUserReply
	GetUsersReq
	GetUsersReply
	Event
	RecordActivity
	RecordEventReq
	RecordEventReply
	LoginReq
	LoginReply
*/
package serversvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionDifficulty int32

const (
	SessionDifficulty_EASY      SessionDifficulty = 0
	SessionDifficulty_MODERATE  SessionDifficulty = 1
	SessionDifficulty_DIFFICULT SessionDifficulty = 2
)

var SessionDifficulty_name = map[int32]string{
	0: "EASY",
	1: "MODERATE",
	2: "DIFFICULT",
}
var SessionDifficulty_value = map[string]int32{
	"EASY":      0,
	"MODERATE":  1,
	"DIFFICULT": 2,
}

func (x SessionDifficulty) String() string {
	return proto.EnumName(SessionDifficulty_name, int32(x))
}
func (SessionDifficulty) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// General attributes used to describe a session.
type SessionTag int32

const (
	SessionTag_FAST        SessionTag = 0
	SessionTag_RELAXING    SessionTag = 1
	SessionTag_CALMING     SessionTag = 2
	SessionTag_AEROBIC     SessionTag = 3
	SessionTag_LATIN_MUSIC SessionTag = 4
)

var SessionTag_name = map[int32]string{
	0: "FAST",
	1: "RELAXING",
	2: "CALMING",
	3: "AEROBIC",
	4: "LATIN_MUSIC",
}
var SessionTag_value = map[string]int32{
	"FAST":        0,
	"RELAXING":    1,
	"CALMING":     2,
	"AEROBIC":     3,
	"LATIN_MUSIC": 4,
}

func (x SessionTag) String() string {
	return proto.EnumName(SessionTag_name, int32(x))
}
func (SessionTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FitnessCategory int32

const (
	FitnessCategory_YOGA           FitnessCategory = 0
	FitnessCategory_HATHA_YOGA     FitnessCategory = 1
	FitnessCategory_KUNDALINI_YOGA FitnessCategory = 2
	FitnessCategory_FAST_YOGA      FitnessCategory = 3
	FitnessCategory_MEDITATION     FitnessCategory = 101
	FitnessCategory_TM_MEDITATION  FitnessCategory = 102
	FitnessCategory_DANCE          FitnessCategory = 201
	FitnessCategory_HIP_HOP        FitnessCategory = 202
	FitnessCategory_ZUMBA          FitnessCategory = 203
)

var FitnessCategory_name = map[int32]string{
	0:   "YOGA",
	1:   "HATHA_YOGA",
	2:   "KUNDALINI_YOGA",
	3:   "FAST_YOGA",
	101: "MEDITATION",
	102: "TM_MEDITATION",
	201: "DANCE",
	202: "HIP_HOP",
	203: "ZUMBA",
}
var FitnessCategory_value = map[string]int32{
	"YOGA":           0,
	"HATHA_YOGA":     1,
	"KUNDALINI_YOGA": 2,
	"FAST_YOGA":      3,
	"MEDITATION":     101,
	"TM_MEDITATION":  102,
	"DANCE":          201,
	"HIP_HOP":        202,
	"ZUMBA":          203,
}

func (x FitnessCategory) String() string {
	return proto.EnumName(FitnessCategory_name, int32(x))
}
func (FitnessCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeviceType int32

const (
	DeviceType_ANDROID_PHONE  DeviceType = 0
	DeviceType_ANDROID_TABLET DeviceType = 1
	DeviceType_IPHONE         DeviceType = 2
	DeviceType_IPAD           DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "ANDROID_PHONE",
	1: "ANDROID_TABLET",
	2: "IPHONE",
	3: "IPAD",
}
var DeviceType_value = map[string]int32{
	"ANDROID_PHONE":  0,
	"ANDROID_TABLET": 1,
	"IPHONE":         2,
	"IPAD":           3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EventType int32

const (
	EventType_LOGIN_EVENT       EventType = 0
	EventType_LOGOUT_EVENT      EventType = 1
	EventType_DEVICE_USED       EventType = 2
	EventType_JOIN_SESSION      EventType = 101
	EventType_FOLLOW_INSTRUCTOR EventType = 102
	EventType_LIKE_PRESS_WATCH  EventType = 201
)

var EventType_name = map[int32]string{
	0:   "LOGIN_EVENT",
	1:   "LOGOUT_EVENT",
	2:   "DEVICE_USED",
	101: "JOIN_SESSION",
	102: "FOLLOW_INSTRUCTOR",
	201: "LIKE_PRESS_WATCH",
}
var EventType_value = map[string]int32{
	"LOGIN_EVENT":       0,
	"LOGOUT_EVENT":      1,
	"DEVICE_USED":       2,
	"JOIN_SESSION":      101,
	"FOLLOW_INSTRUCTOR": 102,
	"LIKE_PRESS_WATCH":  201,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ServerSvcStatusReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ServerSvcStatusReq) Reset()                    { *m = ServerSvcStatusReq{} }
func (m *ServerSvcStatusReq) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusReq) ProtoMessage()               {}
func (*ServerSvcStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerSvcStatusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ServerSvcStatusReply struct {
	// ErrorData errData = 1;
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ServerSvcStatusReply) Reset()                    { *m = ServerSvcStatusReply{} }
func (m *ServerSvcStatusReply) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusReply) ProtoMessage()               {}
func (*ServerSvcStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerSvcStatusReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SessionUsers struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *SessionUsers) Reset()                    { *m = SessionUsers{} }
func (m *SessionUsers) String() string            { return proto.CompactTextString(m) }
func (*SessionUsers) ProtoMessage()               {}
func (*SessionUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SessionUsers) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *SessionUsers) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type SessionInfo struct {
	// Timestamp sessionTime = 1;
	SessionTime     string            `protobuf:"bytes,1,opt,name=sessionTime" json:"sessionTime,omitempty"`
	SessionDesc     string            `protobuf:"bytes,2,opt,name=sessionDesc" json:"sessionDesc,omitempty"`
	InstructorID    string            `protobuf:"bytes,3,opt,name=instructorID" json:"instructorID,omitempty"`
	SessionType     []FitnessCategory `protobuf:"varint,4,rep,packed,name=sessionType,enum=serversvc.FitnessCategory" json:"sessionType,omitempty"`
	DifficultyLevel SessionDifficulty `protobuf:"varint,5,opt,name=difficultyLevel,enum=serversvc.SessionDifficulty" json:"difficultyLevel,omitempty"`
	TagList         []SessionTag      `protobuf:"varint,6,rep,packed,name=tagList,enum=serversvc.SessionTag" json:"tagList,omitempty"`
	SessionID       string            `protobuf:"bytes,7,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SessionInfo) GetSessionTime() string {
	if m != nil {
		return m.SessionTime
	}
	return ""
}

func (m *SessionInfo) GetSessionDesc() string {
	if m != nil {
		return m.SessionDesc
	}
	return ""
}

func (m *SessionInfo) GetInstructorID() string {
	if m != nil {
		return m.InstructorID
	}
	return ""
}

func (m *SessionInfo) GetSessionType() []FitnessCategory {
	if m != nil {
		return m.SessionType
	}
	return nil
}

func (m *SessionInfo) GetDifficultyLevel() SessionDifficulty {
	if m != nil {
		return m.DifficultyLevel
	}
	return SessionDifficulty_EASY
}

func (m *SessionInfo) GetTagList() []SessionTag {
	if m != nil {
		return m.TagList
	}
	return nil
}

func (m *SessionInfo) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type Review struct {
	Rating   float32 `protobuf:"fixed32,1,opt,name=rating" json:"rating,omitempty"`
	Review   string  `protobuf:"bytes,2,opt,name=review" json:"review,omitempty"`
	ReviewID string  `protobuf:"bytes,3,opt,name=reviewID" json:"reviewID,omitempty"`
}

func (m *Review) Reset()                    { *m = Review{} }
func (m *Review) String() string            { return proto.CompactTextString(m) }
func (*Review) ProtoMessage()               {}
func (*Review) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Review) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Review) GetReview() string {
	if m != nil {
		return m.Review
	}
	return ""
}

func (m *Review) GetReviewID() string {
	if m != nil {
		return m.ReviewID
	}
	return ""
}

type InstructorReview struct {
	InstructorID string `protobuf:"bytes,1,opt,name=instructorID" json:"instructorID,omitempty"`
	ReviewID     string `protobuf:"bytes,2,opt,name=reviewID" json:"reviewID,omitempty"`
}

func (m *InstructorReview) Reset()                    { *m = InstructorReview{} }
func (m *InstructorReview) String() string            { return proto.CompactTextString(m) }
func (*InstructorReview) ProtoMessage()               {}
func (*InstructorReview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstructorReview) GetInstructorID() string {
	if m != nil {
		return m.InstructorID
	}
	return ""
}

func (m *InstructorReview) GetReviewID() string {
	if m != nil {
		return m.ReviewID
	}
	return ""
}

type CreditCard struct {
	Name         string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Number       string `protobuf:"bytes,2,opt,name=Number,json=number" json:"Number,omitempty"`
	ExpiryMonth  string `protobuf:"bytes,3,opt,name=ExpiryMonth,json=expiryMonth" json:"ExpiryMonth,omitempty"`
	ExpiryYear   string `protobuf:"bytes,4,opt,name=ExpiryYear,json=expiryYear" json:"ExpiryYear,omitempty"`
	CCV          string `protobuf:"bytes,5,opt,name=CCV,json=cCV" json:"CCV,omitempty"`
	IsDefault    bool   `protobuf:"varint,6,opt,name=isDefault" json:"isDefault,omitempty"`
	CreditCardID string `protobuf:"bytes,7,opt,name=creditCardID" json:"creditCardID,omitempty"`
}

func (m *CreditCard) Reset()                    { *m = CreditCard{} }
func (m *CreditCard) String() string            { return proto.CompactTextString(m) }
func (*CreditCard) ProtoMessage()               {}
func (*CreditCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreditCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreditCard) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *CreditCard) GetExpiryMonth() string {
	if m != nil {
		return m.ExpiryMonth
	}
	return ""
}

func (m *CreditCard) GetExpiryYear() string {
	if m != nil {
		return m.ExpiryYear
	}
	return ""
}

func (m *CreditCard) GetCCV() string {
	if m != nil {
		return m.CCV
	}
	return ""
}

func (m *CreditCard) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *CreditCard) GetCreditCardID() string {
	if m != nil {
		return m.CreditCardID
	}
	return ""
}

type UserCreditCard struct {
	UserID       string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	CreditCardID string `protobuf:"bytes,2,opt,name=creditCardID" json:"creditCardID,omitempty"`
}

func (m *UserCreditCard) Reset()                    { *m = UserCreditCard{} }
func (m *UserCreditCard) String() string            { return proto.CompactTextString(m) }
func (*UserCreditCard) ProtoMessage()               {}
func (*UserCreditCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserCreditCard) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserCreditCard) GetCreditCardID() string {
	if m != nil {
		return m.CreditCardID
	}
	return ""
}

type BankAcct struct {
	RoutingNum string `protobuf:"bytes,1,opt,name=routingNum" json:"routingNum,omitempty"`
	AcctNum    string `protobuf:"bytes,2,opt,name=acctNum" json:"acctNum,omitempty"`
	BankName   string `protobuf:"bytes,3,opt,name=bankName" json:"bankName,omitempty"`
	BankAcctID string `protobuf:"bytes,4,opt,name=bankAcctID" json:"bankAcctID,omitempty"`
}

func (m *BankAcct) Reset()                    { *m = BankAcct{} }
func (m *BankAcct) String() string            { return proto.CompactTextString(m) }
func (*BankAcct) ProtoMessage()               {}
func (*BankAcct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BankAcct) GetRoutingNum() string {
	if m != nil {
		return m.RoutingNum
	}
	return ""
}

func (m *BankAcct) GetAcctNum() string {
	if m != nil {
		return m.AcctNum
	}
	return ""
}

func (m *BankAcct) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *BankAcct) GetBankAcctID() string {
	if m != nil {
		return m.BankAcctID
	}
	return ""
}

type InstructorBankAcct struct {
	InstructorID string `protobuf:"bytes,1,opt,name=instructorID" json:"instructorID,omitempty"`
	BankAcctID   string `protobuf:"bytes,2,opt,name=bankAcctID" json:"bankAcctID,omitempty"`
}

func (m *InstructorBankAcct) Reset()                    { *m = InstructorBankAcct{} }
func (m *InstructorBankAcct) String() string            { return proto.CompactTextString(m) }
func (*InstructorBankAcct) ProtoMessage()               {}
func (*InstructorBankAcct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InstructorBankAcct) GetInstructorID() string {
	if m != nil {
		return m.InstructorID
	}
	return ""
}

func (m *InstructorBankAcct) GetBankAcctID() string {
	if m != nil {
		return m.BankAcctID
	}
	return ""
}

type InstructorInfo struct {
	FirstName          string            `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	Age                string            `protobuf:"bytes,2,opt,name=age" json:"age,omitempty"`
	Sex                string            `protobuf:"bytes,3,opt,name=sex" json:"sex,omitempty"`
	Location           string            `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Email              string            `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	UserName           string            `protobuf:"bytes,6,opt,name=userName" json:"userName,omitempty"`
	PassWord           string            `protobuf:"bytes,7,opt,name=passWord" json:"passWord,omitempty"`
	Desc               string            `protobuf:"bytes,8,opt,name=desc" json:"desc,omitempty"`
	Certification      string            `protobuf:"bytes,9,opt,name=certification" json:"certification,omitempty"`
	FitnessSpecialties []FitnessCategory `protobuf:"varint,10,rep,packed,name=fitnessSpecialties,enum=serversvc.FitnessCategory" json:"fitnessSpecialties,omitempty"`
	LastName           string            `protobuf:"bytes,11,opt,name=lastName" json:"lastName,omitempty"`
	City               string            `protobuf:"bytes,12,opt,name=city" json:"city,omitempty"`
	Country            string            `protobuf:"bytes,13,opt,name=country" json:"country,omitempty"`
	InstructorID       string            `protobuf:"bytes,14,opt,name=instructorID" json:"instructorID,omitempty"`
}

func (m *InstructorInfo) Reset()                    { *m = InstructorInfo{} }
func (m *InstructorInfo) String() string            { return proto.CompactTextString(m) }
func (*InstructorInfo) ProtoMessage()               {}
func (*InstructorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InstructorInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *InstructorInfo) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *InstructorInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *InstructorInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *InstructorInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *InstructorInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *InstructorInfo) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *InstructorInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *InstructorInfo) GetCertification() string {
	if m != nil {
		return m.Certification
	}
	return ""
}

func (m *InstructorInfo) GetFitnessSpecialties() []FitnessCategory {
	if m != nil {
		return m.FitnessSpecialties
	}
	return nil
}

func (m *InstructorInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *InstructorInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *InstructorInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *InstructorInfo) GetInstructorID() string {
	if m != nil {
		return m.InstructorID
	}
	return ""
}

type Device struct {
	DeviceID   string     `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	DeviceDesc string     `protobuf:"bytes,2,opt,name=deviceDesc" json:"deviceDesc,omitempty"`
	DeviceType DeviceType `protobuf:"varint,3,opt,name=deviceType,enum=serversvc.DeviceType" json:"deviceType,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Device) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *Device) GetDeviceDesc() string {
	if m != nil {
		return m.DeviceDesc
	}
	return ""
}

func (m *Device) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_ANDROID_PHONE
}

type UserDevice struct {
	UserID   string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
}

func (m *UserDevice) Reset()                    { *m = UserDevice{} }
func (m *UserDevice) String() string            { return proto.CompactTextString(m) }
func (*UserDevice) ProtoMessage()               {}
func (*UserDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserDevice) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserDevice) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

type UserInfo struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	Age       string `protobuf:"bytes,2,opt,name=age" json:"age,omitempty"`
	Sex       string `protobuf:"bytes,3,opt,name=sex" json:"sex,omitempty"`
	City      string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Country   string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	UserName  string `protobuf:"bytes,7,opt,name=userName" json:"userName,omitempty"`
	PassWord  string `protobuf:"bytes,8,opt,name=passWord" json:"passWord,omitempty"`
	LastName  string `protobuf:"bytes,9,opt,name=lastName" json:"lastName,omitempty"`
	UserID    string `protobuf:"bytes,10,opt,name=userID" json:"userID,omitempty"`
	// Pointer to event activity in DB
	RecordActivityID string `protobuf:"bytes,103,opt,name=RecordActivityID,json=recordActivityID" json:"RecordActivityID,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *UserInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserInfo) GetRecordActivityID() string {
	if m != nil {
		return m.RecordActivityID
	}
	return ""
}

type UserFriend struct {
	UserID   string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FriendID string `protobuf:"bytes,2,opt,name=friendID" json:"friendID,omitempty"`
}

func (m *UserFriend) Reset()                    { *m = UserFriend{} }
func (m *UserFriend) String() string            { return proto.CompactTextString(m) }
func (*UserFriend) ProtoMessage()               {}
func (*UserFriend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UserFriend) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserFriend) GetFriendID() string {
	if m != nil {
		return m.FriendID
	}
	return ""
}

type UserFollow struct {
	UserID   string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FollowID string `protobuf:"bytes,2,opt,name=followID" json:"followID,omitempty"`
}

func (m *UserFollow) Reset()                    { *m = UserFollow{} }
func (m *UserFollow) String() string            { return proto.CompactTextString(m) }
func (*UserFollow) ProtoMessage()               {}
func (*UserFollow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UserFollow) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserFollow) GetFollowID() string {
	if m != nil {
		return m.FollowID
	}
	return ""
}

type GetSessionsReq struct {
	// If specified, only show sessions of this type.
	SessionType string `protobuf:"bytes,1,opt,name=sessionType" json:"sessionType,omitempty"`
}

func (m *GetSessionsReq) Reset()                    { *m = GetSessionsReq{} }
func (m *GetSessionsReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsReq) ProtoMessage()               {}
func (*GetSessionsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSessionsReq) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

type GetSessionsReply struct {
	SessionList    []*SessionInfo    `protobuf:"bytes,1,rep,name=sessionList" json:"sessionList,omitempty"`
	InstructorList []*InstructorInfo `protobuf:"bytes,2,rep,name=instructorList" json:"instructorList,omitempty"`
}

func (m *GetSessionsReply) Reset()                    { *m = GetSessionsReply{} }
func (m *GetSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsReply) ProtoMessage()               {}
func (*GetSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetSessionsReply) GetSessionList() []*SessionInfo {
	if m != nil {
		return m.SessionList
	}
	return nil
}

func (m *GetSessionsReply) GetInstructorList() []*InstructorInfo {
	if m != nil {
		return m.InstructorList
	}
	return nil
}

type GetSessionReply struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetSessionReply) Reset()                    { *m = GetSessionReply{} }
func (m *GetSessionReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionReply) ProtoMessage()               {}
func (*GetSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetSessionReply) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetSessionReq struct {
	SessionKey string `protobuf:"bytes,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
}

func (m *GetSessionReq) Reset()                    { *m = GetSessionReq{} }
func (m *GetSessionReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionReq) ProtoMessage()               {}
func (*GetSessionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetSessionReq) GetSessionKey() string {
	if m != nil {
		return m.SessionKey
	}
	return ""
}

type PostSessionReq struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *PostSessionReq) Reset()                    { *m = PostSessionReq{} }
func (m *PostSessionReq) String() string            { return proto.CompactTextString(m) }
func (*PostSessionReq) ProtoMessage()               {}
func (*PostSessionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PostSessionReq) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type PostSessionReply struct {
	SessionKey string `protobuf:"bytes,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
}

func (m *PostSessionReply) Reset()                    { *m = PostSessionReply{} }
func (m *PostSessionReply) String() string            { return proto.CompactTextString(m) }
func (*PostSessionReply) ProtoMessage()               {}
func (*PostSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PostSessionReply) GetSessionKey() string {
	if m != nil {
		return m.SessionKey
	}
	return ""
}

type EnrollInstructorReq struct {
	Instructor *InstructorInfo `protobuf:"bytes,1,opt,name=instructor" json:"instructor,omitempty"`
}

func (m *EnrollInstructorReq) Reset()                    { *m = EnrollInstructorReq{} }
func (m *EnrollInstructorReq) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorReq) ProtoMessage()               {}
func (*EnrollInstructorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EnrollInstructorReq) GetInstructor() *InstructorInfo {
	if m != nil {
		return m.Instructor
	}
	return nil
}

type EnrollInstructorReply struct {
	InstructorKey string `protobuf:"bytes,1,opt,name=instructorKey" json:"instructorKey,omitempty"`
}

func (m *EnrollInstructorReply) Reset()                    { *m = EnrollInstructorReply{} }
func (m *EnrollInstructorReply) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorReply) ProtoMessage()               {}
func (*EnrollInstructorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EnrollInstructorReply) GetInstructorKey() string {
	if m != nil {
		return m.InstructorKey
	}
	return ""
}

type GetInstructorReq struct {
	InstructorKey string `protobuf:"bytes,1,opt,name=instructorKey" json:"instructorKey,omitempty"`
}

func (m *GetInstructorReq) Reset()                    { *m = GetInstructorReq{} }
func (m *GetInstructorReq) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorReq) ProtoMessage()               {}
func (*GetInstructorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetInstructorReq) GetInstructorKey() string {
	if m != nil {
		return m.InstructorKey
	}
	return ""
}

type GetInstructorReply struct {
	Info *InstructorInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetInstructorReply) Reset()                    { *m = GetInstructorReply{} }
func (m *GetInstructorReply) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorReply) ProtoMessage()               {}
func (*GetInstructorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetInstructorReply) GetInfo() *InstructorInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetInstructorsReq struct {
	// If specified, only show sessions of this type.
	SessionType string `protobuf:"bytes,1,opt,name=sessionType" json:"sessionType,omitempty"`
}

func (m *GetInstructorsReq) Reset()                    { *m = GetInstructorsReq{} }
func (m *GetInstructorsReq) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorsReq) ProtoMessage()               {}
func (*GetInstructorsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetInstructorsReq) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

type GetInstructorsReply struct {
}

func (m *GetInstructorsReply) Reset()                    { *m = GetInstructorsReply{} }
func (m *GetInstructorsReply) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorsReply) ProtoMessage()               {}
func (*GetInstructorsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type GetUserReq struct {
	UserKey string `protobuf:"bytes,1,opt,name=userKey" json:"userKey,omitempty"`
}

func (m *GetUserReq) Reset()                    { *m = GetUserReq{} }
func (m *GetUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserReq) ProtoMessage()               {}
func (*GetUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetUserReq) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

type GetUserReply struct {
	Info           *UserInfo   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	FriendInfoList []*UserInfo `protobuf:"bytes,2,rep,name=friendInfoList" json:"friendInfoList,omitempty"`
	FollowList     []*UserInfo `protobuf:"bytes,3,rep,name=followList" json:"followList,omitempty"`
}

func (m *GetUserReply) Reset()                    { *m = GetUserReply{} }
func (m *GetUserReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserReply) ProtoMessage()               {}
func (*GetUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetUserReply) GetInfo() *UserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetUserReply) GetFriendInfoList() []*UserInfo {
	if m != nil {
		return m.FriendInfoList
	}
	return nil
}

func (m *GetUserReply) GetFollowList() []*UserInfo {
	if m != nil {
		return m.FollowList
	}
	return nil
}

type EnrollUserReq struct {
	User *UserInfo `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *EnrollUserReq) Reset()                    { *m = EnrollUserReq{} }
func (m *EnrollUserReq) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserReq) ProtoMessage()               {}
func (*EnrollUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *EnrollUserReq) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type EnrollUserReply struct {
	UserKey string `protobuf:"bytes,1,opt,name=userKey" json:"userKey,omitempty"`
}

func (m *EnrollUserReply) Reset()                    { *m = EnrollUserReply{} }
func (m *EnrollUserReply) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserReply) ProtoMessage()               {}
func (*EnrollUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EnrollUserReply) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

type GetUsersReq struct {
}

func (m *GetUsersReq) Reset()                    { *m = GetUsersReq{} }
func (m *GetUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersReq) ProtoMessage()               {}
func (*GetUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type GetUsersReply struct {
	UserList []*UserInfo `protobuf:"bytes,1,rep,name=userList" json:"userList,omitempty"`
}

func (m *GetUsersReply) Reset()                    { *m = GetUsersReply{} }
func (m *GetUsersReply) String() string            { return proto.CompactTextString(m) }
func (*GetUsersReply) ProtoMessage()               {}
func (*GetUsersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetUsersReply) GetUserList() []*UserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

type Event struct {
	EventType EventType `protobuf:"varint,1,opt,name=eventType,enum=serversvc.EventType" json:"eventType,omitempty"`
	// Duration eventDuration = 2;
	// google.protobuf.Timestamp eventTS = 3;
	EventDesc string `protobuf:"bytes,4,opt,name=eventDesc" json:"eventDesc,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Event) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_LOGIN_EVENT
}

func (m *Event) GetEventDesc() string {
	if m != nil {
		return m.EventDesc
	}
	return ""
}

type RecordActivity struct {
	EventList []*Event `protobuf:"bytes,1,rep,name=eventList" json:"eventList,omitempty"`
}

func (m *RecordActivity) Reset()                    { *m = RecordActivity{} }
func (m *RecordActivity) String() string            { return proto.CompactTextString(m) }
func (*RecordActivity) ProtoMessage()               {}
func (*RecordActivity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RecordActivity) GetEventList() []*Event {
	if m != nil {
		return m.EventList
	}
	return nil
}

type RecordEventReq struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *RecordEventReq) Reset()                    { *m = RecordEventReq{} }
func (m *RecordEventReq) String() string            { return proto.CompactTextString(m) }
func (*RecordEventReq) ProtoMessage()               {}
func (*RecordEventReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *RecordEventReq) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type RecordEventReply struct {
}

func (m *RecordEventReply) Reset()                    { *m = RecordEventReply{} }
func (m *RecordEventReply) String() string            { return proto.CompactTextString(m) }
func (*RecordEventReply) ProtoMessage()               {}
func (*RecordEventReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type LoginReq struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	PassWord string `protobuf:"bytes,3,opt,name=passWord" json:"passWord,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *LoginReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginReq) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

type LoginReply struct {
	UserOrInstructorID string `protobuf:"bytes,2,opt,name=userOrInstructorID" json:"userOrInstructorID,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *LoginReply) GetUserOrInstructorID() string {
	if m != nil {
		return m.UserOrInstructorID
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerSvcStatusReq)(nil), "serversvc.ServerSvcStatusReq")
	proto.RegisterType((*ServerSvcStatusReply)(nil), "serversvc.ServerSvcStatusReply")
	proto.RegisterType((*SessionUsers)(nil), "serversvc.SessionUsers")
	proto.RegisterType((*SessionInfo)(nil), "serversvc.SessionInfo")
	proto.RegisterType((*Review)(nil), "serversvc.Review")
	proto.RegisterType((*InstructorReview)(nil), "serversvc.InstructorReview")
	proto.RegisterType((*CreditCard)(nil), "serversvc.CreditCard")
	proto.RegisterType((*UserCreditCard)(nil), "serversvc.UserCreditCard")
	proto.RegisterType((*BankAcct)(nil), "serversvc.BankAcct")
	proto.RegisterType((*InstructorBankAcct)(nil), "serversvc.InstructorBankAcct")
	proto.RegisterType((*InstructorInfo)(nil), "serversvc.InstructorInfo")
	proto.RegisterType((*Device)(nil), "serversvc.Device")
	proto.RegisterType((*UserDevice)(nil), "serversvc.UserDevice")
	proto.RegisterType((*UserInfo)(nil), "serversvc.UserInfo")
	proto.RegisterType((*UserFriend)(nil), "serversvc.UserFriend")
	proto.RegisterType((*UserFollow)(nil), "serversvc.UserFollow")
	proto.RegisterType((*GetSessionsReq)(nil), "serversvc.GetSessionsReq")
	proto.RegisterType((*GetSessionsReply)(nil), "serversvc.GetSessionsReply")
	proto.RegisterType((*GetSessionReply)(nil), "serversvc.GetSessionReply")
	proto.RegisterType((*GetSessionReq)(nil), "serversvc.GetSessionReq")
	proto.RegisterType((*PostSessionReq)(nil), "serversvc.PostSessionReq")
	proto.RegisterType((*PostSessionReply)(nil), "serversvc.PostSessionReply")
	proto.RegisterType((*EnrollInstructorReq)(nil), "serversvc.EnrollInstructorReq")
	proto.RegisterType((*EnrollInstructorReply)(nil), "serversvc.EnrollInstructorReply")
	proto.RegisterType((*GetInstructorReq)(nil), "serversvc.GetInstructorReq")
	proto.RegisterType((*GetInstructorReply)(nil), "serversvc.GetInstructorReply")
	proto.RegisterType((*GetInstructorsReq)(nil), "serversvc.GetInstructorsReq")
	proto.RegisterType((*GetInstructorsReply)(nil), "serversvc.GetInstructorsReply")
	proto.RegisterType((*GetUserReq)(nil), "serversvc.GetUserReq")
	proto.RegisterType((*GetUserReply)(nil), "serversvc.GetUserReply")
	proto.RegisterType((*EnrollUserReq)(nil), "serversvc.EnrollUserReq")
	proto.RegisterType((*EnrollUserReply)(nil), "serversvc.EnrollUserReply")
	proto.RegisterType((*GetUsersReq)(nil), "serversvc.GetUsersReq")
	proto.RegisterType((*GetUsersReply)(nil), "serversvc.GetUsersReply")
	proto.RegisterType((*Event)(nil), "serversvc.Event")
	proto.RegisterType((*RecordActivity)(nil), "serversvc.RecordActivity")
	proto.RegisterType((*RecordEventReq)(nil), "serversvc.RecordEventReq")
	proto.RegisterType((*RecordEventReply)(nil), "serversvc.RecordEventReply")
	proto.RegisterType((*LoginReq)(nil), "serversvc.LoginReq")
	proto.RegisterType((*LoginReply)(nil), "serversvc.LoginReply")
	proto.RegisterEnum("serversvc.SessionDifficulty", SessionDifficulty_name, SessionDifficulty_value)
	proto.RegisterEnum("serversvc.SessionTag", SessionTag_name, SessionTag_value)
	proto.RegisterEnum("serversvc.FitnessCategory", FitnessCategory_name, FitnessCategory_value)
	proto.RegisterEnum("serversvc.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("serversvc.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerSvc service

type ServerSvcClient interface {
	// Is it running?
	// DONE
	GetStatus(ctx context.Context, in *ServerSvcStatusReq, opts ...grpc.CallOption) (*ServerSvcStatusReply, error)
	// Session handling
	// DONE
	GetSessions(ctx context.Context, in *GetSessionsReq, opts ...grpc.CallOption) (*GetSessionsReply, error)
	// DONE
	PostSession(ctx context.Context, in *PostSessionReq, opts ...grpc.CallOption) (*PostSessionReply, error)
	// DONE
	GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionReply, error)
	// Instructor handling
	// DONE
	EnrollInstructor(ctx context.Context, in *EnrollInstructorReq, opts ...grpc.CallOption) (*EnrollInstructorReply, error)
	// DONE
	GetInstructor(ctx context.Context, in *GetInstructorReq, opts ...grpc.CallOption) (*GetInstructorReply, error)
	GetInstructors(ctx context.Context, in *GetInstructorsReq, opts ...grpc.CallOption) (*GetInstructorsReply, error)
	// User handling
	// DONE
	EnrollUser(ctx context.Context, in *EnrollUserReq, opts ...grpc.CallOption) (*EnrollUserReply, error)
	// DONE
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// Used for analytics
	// Client will record much of the user interaction with the app
	RecordEvent(ctx context.Context, in *RecordEventReq, opts ...grpc.CallOption) (*RecordEventReply, error)
}

type serverSvcClient struct {
	cc *grpc.ClientConn
}

func NewServerSvcClient(cc *grpc.ClientConn) ServerSvcClient {
	return &serverSvcClient{cc}
}

func (c *serverSvcClient) GetStatus(ctx context.Context, in *ServerSvcStatusReq, opts ...grpc.CallOption) (*ServerSvcStatusReply, error) {
	out := new(ServerSvcStatusReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSessions(ctx context.Context, in *GetSessionsReq, opts ...grpc.CallOption) (*GetSessionsReply, error) {
	out := new(GetSessionsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) PostSession(ctx context.Context, in *PostSessionReq, opts ...grpc.CallOption) (*PostSessionReply, error) {
	out := new(PostSessionReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/PostSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionReply, error) {
	out := new(GetSessionReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollInstructor(ctx context.Context, in *EnrollInstructorReq, opts ...grpc.CallOption) (*EnrollInstructorReply, error) {
	out := new(EnrollInstructorReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetInstructor(ctx context.Context, in *GetInstructorReq, opts ...grpc.CallOption) (*GetInstructorReply, error) {
	out := new(GetInstructorReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetInstructors(ctx context.Context, in *GetInstructorsReq, opts ...grpc.CallOption) (*GetInstructorsReply, error) {
	out := new(GetInstructorsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetInstructors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollUser(ctx context.Context, in *EnrollUserReq, opts ...grpc.CallOption) (*EnrollUserReply, error) {
	out := new(EnrollUserReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersReply, error) {
	out := new(GetUsersReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) RecordEvent(ctx context.Context, in *RecordEventReq, opts ...grpc.CallOption) (*RecordEventReply, error) {
	out := new(RecordEventReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/RecordEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerSvc service

type ServerSvcServer interface {
	// Is it running?
	// DONE
	GetStatus(context.Context, *ServerSvcStatusReq) (*ServerSvcStatusReply, error)
	// Session handling
	// DONE
	GetSessions(context.Context, *GetSessionsReq) (*GetSessionsReply, error)
	// DONE
	PostSession(context.Context, *PostSessionReq) (*PostSessionReply, error)
	// DONE
	GetSession(context.Context, *GetSessionReq) (*GetSessionReply, error)
	// Instructor handling
	// DONE
	EnrollInstructor(context.Context, *EnrollInstructorReq) (*EnrollInstructorReply, error)
	// DONE
	GetInstructor(context.Context, *GetInstructorReq) (*GetInstructorReply, error)
	GetInstructors(context.Context, *GetInstructorsReq) (*GetInstructorsReply, error)
	// User handling
	// DONE
	EnrollUser(context.Context, *EnrollUserReq) (*EnrollUserReply, error)
	// DONE
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	GetUsers(context.Context, *GetUsersReq) (*GetUsersReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// Used for analytics
	// Client will record much of the user interaction with the app
	RecordEvent(context.Context, *RecordEventReq) (*RecordEventReply, error)
}

func RegisterServerSvcServer(s *grpc.Server, srv ServerSvcServer) {
	s.RegisterService(&_ServerSvc_serviceDesc, srv)
}

func _ServerSvc_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerSvcStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetStatus(ctx, req.(*ServerSvcStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSessions(ctx, req.(*GetSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_PostSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).PostSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/PostSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).PostSession(ctx, req.(*PostSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSession(ctx, req.(*GetSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollInstructorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, req.(*EnrollInstructorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetInstructor(ctx, req.(*GetInstructorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetInstructors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetInstructors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetInstructors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetInstructors(ctx, req.(*GetInstructorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollUser(ctx, req.(*EnrollUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_RecordEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).RecordEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/RecordEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).RecordEvent(ctx, req.(*RecordEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serversvc.ServerSvc",
	HandlerType: (*ServerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ServerSvc_GetStatus_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ServerSvc_GetSessions_Handler,
		},
		{
			MethodName: "PostSession",
			Handler:    _ServerSvc_PostSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ServerSvc_GetSession_Handler,
		},
		{
			MethodName: "EnrollInstructor",
			Handler:    _ServerSvc_EnrollInstructor_Handler,
		},
		{
			MethodName: "GetInstructor",
			Handler:    _ServerSvc_GetInstructor_Handler,
		},
		{
			MethodName: "GetInstructors",
			Handler:    _ServerSvc_GetInstructors_Handler,
		},
		{
			MethodName: "EnrollUser",
			Handler:    _ServerSvc_EnrollUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ServerSvc_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _ServerSvc_GetUsers_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ServerSvc_Login_Handler,
		},
		{
			MethodName: "RecordEvent",
			Handler:    _ServerSvc_RecordEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverrpc.proto",
}

func init() { proto.RegisterFile("serverrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xef, 0x6e, 0xdb, 0xc8,
	0x11, 0x0f, 0x25, 0x5b, 0x96, 0xc6, 0xb6, 0xcc, 0x6c, 0xe2, 0x54, 0x75, 0x73, 0xa9, 0x41, 0x14,
	0xd7, 0xc0, 0x45, 0x9d, 0xc2, 0x87, 0x00, 0xd7, 0xde, 0xb5, 0x28, 0x23, 0xd2, 0x36, 0x2f, 0xfa,
	0x63, 0x50, 0xb4, 0x93, 0xf4, 0x8b, 0xc0, 0xd0, 0xb4, 0x4b, 0x54, 0x16, 0x1d, 0x92, 0xf6, 0x9d,
	0xd0, 0x0f, 0xed, 0x1b, 0xf4, 0x63, 0x5f, 0xa1, 0xfd, 0xd6, 0xd7, 0xe8, 0x15, 0xe8, 0xa3, 0xf4,
	0x19, 0xba, 0xb3, 0xbb, 0x24, 0x77, 0xa9, 0x3f, 0x49, 0x81, 0x7e, 0xe3, 0xcc, 0xce, 0xfc, 0x76,
	0xf6, 0x37, 0xb3, 0x33, 0x2b, 0xc1, 0x4e, 0x1a, 0x26, 0xf7, 0x61, 0x92, 0xdc, 0x06, 0x87, 0xb7,
	0x49, 0x9c, 0xc5, 0xa4, 0xc5, 0x15, 0xe9, 0x7d, 0x60, 0x3c, 0x07, 0x32, 0x62, 0xc2, 0xe8, 0x3e,
	0x18, 0x65, 0x7e, 0x76, 0x97, 0xba, 0xe1, 0x07, 0x42, 0x60, 0x6d, 0xea, 0xdf, 0x84, 0x1d, 0x6d,
	0x5f, 0x7b, 0xde, 0x72, 0xd9, 0xb7, 0xf1, 0x0b, 0x78, 0x3c, 0x67, 0x79, 0x3b, 0x99, 0x91, 0x0e,
	0x6c, 0xdc, 0x84, 0x69, 0xea, 0x5f, 0xe7, 0xe6, 0xb9, 0x68, 0x58, 0xb0, 0x35, 0xa2, 0x9f, 0x51,
	0x3c, 0x3d, 0xa7, 0x1b, 0xa6, 0xe4, 0x29, 0xd0, 0x8d, 0x99, 0xec, 0x58, 0xc2, 0xb6, 0x54, 0x90,
	0x27, 0xd0, 0xb8, 0xa3, 0x66, 0x74, 0xa9, 0xc6, 0x96, 0x84, 0x64, 0x7c, 0x5f, 0x83, 0x4d, 0x01,
	0xe3, 0x4c, 0xaf, 0x62, 0xb2, 0x0f, 0x9b, 0xc2, 0xc9, 0x8b, 0x8a, 0x10, 0x65, 0x95, 0x64, 0x61,
	0x85, 0x69, 0x20, 0xe0, 0x64, 0x15, 0x31, 0x60, 0x2b, 0x9a, 0xa6, 0x59, 0x72, 0x17, 0x64, 0x31,
	0xee, 0x58, 0x67, 0x26, 0x8a, 0x8e, 0x7c, 0x5d, 0xee, 0x33, 0xbb, 0x0d, 0x3b, 0x6b, 0xfb, 0xf5,
	0xe7, 0xed, 0xa3, 0xbd, 0xc3, 0x82, 0xba, 0xc3, 0xe3, 0x28, 0x9b, 0x52, 0x83, 0xae, 0x9f, 0x85,
	0xd7, 0x71, 0x32, 0x73, 0x65, 0x73, 0x72, 0x0c, 0x3b, 0x97, 0xd1, 0xd5, 0x55, 0x14, 0xdc, 0x4d,
	0xb2, 0x59, 0x2f, 0xbc, 0x0f, 0x27, 0x9d, 0x75, 0xba, 0x49, 0xfb, 0xe8, 0xa9, 0x84, 0x20, 0x8e,
	0x65, 0x15, 0x86, 0x6e, 0xd5, 0x89, 0xbc, 0x80, 0x8d, 0xcc, 0xbf, 0xee, 0x45, 0x69, 0xd6, 0x69,
	0xb0, 0x08, 0x76, 0xe7, 0xfd, 0x3d, 0xff, 0xda, 0xcd, 0xad, 0x54, 0x92, 0x37, 0x2a, 0x24, 0x1b,
	0x1e, 0x34, 0xdc, 0xf0, 0x3e, 0x0a, 0xbf, 0x45, 0xba, 0x13, 0x3f, 0x8b, 0xa6, 0xd7, 0x8c, 0xc1,
	0x9a, 0x2b, 0x24, 0xa6, 0x67, 0x16, 0x79, 0x1a, 0xb8, 0x44, 0xf6, 0xa0, 0xc9, 0xbf, 0x0a, 0xba,
	0x0a, 0xd9, 0x70, 0x41, 0x77, 0x0a, 0xea, 0x04, 0x7e, 0x95, 0x62, 0x6d, 0x01, 0xc5, 0x32, 0x66,
	0xad, 0x82, 0xf9, 0x6f, 0x0d, 0xa0, 0x9b, 0x84, 0x97, 0x51, 0xd6, 0xf5, 0x93, 0x4b, 0xac, 0xc8,
	0x41, 0xa5, 0x22, 0x31, 0xd4, 0xc1, 0xdd, 0xcd, 0xfb, 0x30, 0xc9, 0x43, 0x9d, 0x32, 0x09, 0xf3,
	0x6f, 0x7f, 0x77, 0x1b, 0x25, 0xb3, 0x7e, 0x3c, 0xcd, 0x7e, 0x2f, 0xa2, 0xdd, 0x0c, 0x4b, 0x15,
	0x79, 0x06, 0xc0, 0x2d, 0xde, 0x85, 0x7e, 0x42, 0x53, 0x8b, 0x06, 0x10, 0x16, 0x1a, 0xa2, 0x43,
	0xbd, 0xdb, 0xbd, 0x60, 0x19, 0x6b, 0xb9, 0xf5, 0xa0, 0x7b, 0x81, 0xb4, 0x46, 0xa9, 0x15, 0x5e,
	0xf9, 0x34, 0x35, 0x34, 0x13, 0xda, 0xf3, 0xa6, 0x5b, 0x2a, 0xf0, 0xb0, 0x41, 0x11, 0x6b, 0xc1,
	0xbb, 0xa2, 0x33, 0x7a, 0xd0, 0xc6, 0x6b, 0x20, 0x9d, 0xa9, 0xac, 0x78, 0x4d, 0xae, 0xf8, 0x39,
	0xb4, 0xda, 0x02, 0xb4, 0x3f, 0x6b, 0xd0, 0x7c, 0xe5, 0x4f, 0xff, 0x60, 0x06, 0x41, 0x86, 0xc7,
	0x49, 0xe2, 0x3b, 0x4c, 0x1f, 0xe5, 0x43, 0x80, 0x49, 0x1a, 0xbc, 0xa2, 0x3e, 0xb5, 0xc3, 0x45,
	0x8e, 0x95, 0x8b, 0x98, 0x81, 0xf7, 0x14, 0x85, 0x51, 0x2b, 0xb2, 0x9a, 0xcb, 0x88, 0xfa, 0x5e,
	0xec, 0x40, 0x83, 0x10, 0x24, 0x95, 0x1a, 0xe3, 0x2d, 0x90, 0x32, 0xeb, 0x45, 0x2c, 0x9f, 0x92,
	0x77, 0x15, 0xb9, 0x36, 0x87, 0xfc, 0x8f, 0x3a, 0xb4, 0x4b, 0x68, 0x76, 0xeb, 0x29, 0xff, 0x57,
	0x51, 0x92, 0x66, 0x52, 0x11, 0x94, 0x0a, 0xcc, 0x17, 0xf6, 0x1f, 0x8e, 0x84, 0x9f, 0xa8, 0x49,
	0xc3, 0xef, 0xc4, 0x99, 0xf0, 0x13, 0x8f, 0x3a, 0x89, 0x03, 0x5a, 0xe4, 0xf1, 0x54, 0x1c, 0xa6,
	0x90, 0xc9, 0x63, 0x58, 0x0f, 0x6f, 0xfc, 0x68, 0x22, 0x32, 0xce, 0x05, 0xf4, 0xc0, 0x8c, 0xb0,
	0x2d, 0x1b, 0xdc, 0x23, 0x97, 0x71, 0xed, 0xd6, 0x4f, 0xd3, 0x37, 0x71, 0x72, 0x29, 0xb2, 0x5d,
	0xc8, 0x58, 0xab, 0x97, 0xd8, 0x78, 0x9a, 0xbc, 0x56, 0xf1, 0x9b, 0xfc, 0x04, 0xb6, 0x83, 0x30,
	0xc9, 0x22, 0x7a, 0xb9, 0x79, 0x08, 0x2d, 0xb6, 0xa8, 0x2a, 0xc9, 0x37, 0x40, 0xae, 0x78, 0x57,
	0x19, 0xdd, 0x86, 0x41, 0xe4, 0x4f, 0xb2, 0x28, 0x4c, 0x3b, 0xf0, 0xd1, 0xd6, 0xb3, 0xc0, 0x8b,
	0x9d, 0xd7, 0x17, 0x84, 0x6d, 0x8a, 0xf3, 0x0a, 0x19, 0x23, 0x0c, 0xa2, 0x6c, 0xd6, 0xd9, 0xe2,
	0x11, 0xe2, 0x37, 0x16, 0x49, 0x10, 0xdf, 0x4d, 0xb3, 0x64, 0xd6, 0xd9, 0xe6, 0x45, 0x22, 0xc4,
	0xb9, 0x94, 0xb6, 0xe7, 0x53, 0x6a, 0xfc, 0x11, 0x1a, 0x16, 0xbd, 0xba, 0x01, 0x63, 0xe6, 0x92,
	0x7d, 0x15, 0xc9, 0x2f, 0x64, 0x4c, 0x3c, 0xff, 0x96, 0x1a, 0xb3, 0xa4, 0x21, 0x2f, 0xf3, 0x75,
	0xd6, 0x72, 0xeb, 0xac, 0x61, 0xca, 0x0d, 0xcf, 0x2a, 0x16, 0x5d, 0xc9, 0xd0, 0xf8, 0x2d, 0x00,
	0x5e, 0x2d, 0x11, 0xc0, 0xb2, 0x6b, 0x25, 0x07, 0x56, 0x53, 0x03, 0x33, 0xfe, 0x56, 0x83, 0x26,
	0x42, 0xfc, 0x9f, 0x6a, 0x2d, 0xe7, 0x77, 0x6d, 0x31, 0xbf, 0xeb, 0x2a, 0xbf, 0x45, 0xf5, 0x35,
	0x96, 0x55, 0xdf, 0xc6, 0x8a, 0xea, 0x6b, 0x56, 0xaa, 0x4f, 0xce, 0x7b, 0xab, 0x92, 0xf7, 0x92,
	0x1a, 0x50, 0xa8, 0x39, 0x00, 0xdd, 0x0d, 0x03, 0xea, 0x6d, 0x06, 0x59, 0x74, 0x4f, 0xa3, 0xa5,
	0x16, 0xd7, 0xcc, 0x42, 0x4f, 0x2a, 0xfa, 0x9c, 0xec, 0xe3, 0x24, 0x0a, 0xa7, 0x97, 0xab, 0xc8,
	0xbe, 0x62, 0x16, 0x25, 0xd9, 0xb9, 0x5c, 0x20, 0xc4, 0x93, 0x49, 0xfc, 0xed, 0x4a, 0x04, 0x66,
	0x21, 0x21, 0x08, 0xd9, 0x38, 0x82, 0xf6, 0x49, 0x98, 0x89, 0xf1, 0xc7, 0x5e, 0x2c, 0xfb, 0xea,
	0xb4, 0xae, 0xbc, 0x0a, 0xb0, 0x48, 0xfe, 0xa2, 0x81, 0xae, 0x38, 0xe1, 0xe3, 0xe5, 0xcb, 0xc2,
	0x8d, 0x8d, 0x58, 0x8d, 0xde, 0xb4, 0xcd, 0xa3, 0x27, 0xf3, 0x23, 0x16, 0xeb, 0xc2, 0x95, 0x4d,
	0x89, 0x09, 0xed, 0xf2, 0x02, 0x30, 0xe7, 0x1a, 0x73, 0xfe, 0xa1, 0xe4, 0xac, 0xf6, 0x30, 0xb7,
	0xe2, 0x60, 0xfc, 0x1a, 0x76, 0xca, 0x80, 0x78, 0x3c, 0x07, 0xb0, 0x16, 0x51, 0x53, 0x16, 0xff,
	0xf2, 0x40, 0x98, 0x8d, 0xf1, 0x02, 0xb6, 0x65, 0xf7, 0x0f, 0x78, 0xbb, 0x44, 0x84, 0xaf, 0xc3,
	0x59, 0x3e, 0x06, 0x4a, 0x8d, 0xf1, 0x35, 0xb4, 0xcf, 0xe2, 0x54, 0xf6, 0xf8, 0x5f, 0xb6, 0x3b,
	0x02, 0x5d, 0xf1, 0xc6, 0x70, 0x3f, 0xb6, 0xe3, 0x19, 0x3c, 0xb2, 0xa7, 0x09, 0xcd, 0x9a, 0xfc,
	0x3c, 0xf8, 0x40, 0x7e, 0x09, 0x50, 0x52, 0x21, 0x36, 0x5f, 0xc1, 0x9b, 0x64, 0x4c, 0x39, 0xdb,
	0x9d, 0x47, 0xc4, 0x50, 0x68, 0x83, 0x2d, 0xcd, 0xca, 0x68, 0x54, 0xa5, 0xf1, 0x25, 0xab, 0x01,
	0x35, 0x9a, 0x4f, 0xf3, 0xec, 0x02, 0xa9, 0x78, 0xe2, 0xae, 0x3f, 0x57, 0x08, 0x5c, 0x71, 0x06,
	0xce, 0xe1, 0x4b, 0x78, 0xa8, 0x80, 0x7c, 0x62, 0xe9, 0xee, 0xc2, 0xa3, 0xaa, 0x1b, 0xdd, 0xdc,
	0xf8, 0x1c, 0x80, 0xaa, 0xf1, 0x2a, 0x21, 0x0c, 0xed, 0x2f, 0x78, 0x73, 0xca, 0x03, 0xe4, 0xa2,
	0xf1, 0x77, 0x0d, 0xb6, 0x0a, 0x43, 0x8c, 0xfa, 0xa7, 0x4a, 0xd4, 0x8f, 0xa4, 0xa8, 0xf3, 0x1e,
	0xc8, 0xe3, 0x25, 0x5f, 0x41, 0x5b, 0xdc, 0x5a, 0x2a, 0x49, 0x45, 0xbe, 0xd0, 0xa5, 0x62, 0x4a,
	0xbe, 0x00, 0xe0, 0x17, 0x96, 0x39, 0xd6, 0x97, 0x3b, 0x4a, 0x66, 0x34, 0x41, 0xdb, 0x3c, 0xbf,
	0xf9, 0xb1, 0x68, 0xac, 0x78, 0x8e, 0x95, 0xb1, 0xa2, 0x81, 0xf1, 0x33, 0xd8, 0x91, 0x3d, 0xc5,
	0x4f, 0x93, 0x25, 0x94, 0x6c, 0xc3, 0xa6, 0x60, 0x04, 0x53, 0x40, 0x3b, 0xd2, 0x76, 0x29, 0xa2,
	0xe7, 0x0b, 0xde, 0x7c, 0xa5, 0xa6, 0xb0, 0x70, 0xe7, 0xc2, 0xc8, 0x78, 0x07, 0xeb, 0xf6, 0x7d,
	0x38, 0xcd, 0xc8, 0x11, 0xb4, 0x42, 0xfc, 0x28, 0x72, 0xd9, 0x3e, 0x7a, 0x2c, 0xb9, 0xda, 0xf9,
	0x9a, 0x5b, 0x9a, 0xe1, 0xc0, 0x61, 0x02, 0x9b, 0x8a, 0x7c, 0x66, 0x94, 0x0a, 0x1a, 0x5c, 0x5b,
	0x6d, 0xce, 0xe4, 0x50, 0xd8, 0x4b, 0xe1, 0xe9, 0xd5, 0x3d, 0xdc, 0xd2, 0x84, 0x92, 0x2a, 0x10,
	0xf8, 0x0a, 0x65, 0xf5, 0x73, 0x3a, 0x72, 0xf0, 0x5b, 0xd0, 0x3a, 0xef, 0xcd, 0x97, 0x0d, 0x92,
	0x0f, 0x06, 0xe1, 0x89, 0x65, 0xf7, 0x16, 0x9a, 0xbd, 0xf8, 0x3a, 0x62, 0x0d, 0xa4, 0x18, 0x5d,
	0xda, 0xb2, 0xd1, 0x55, 0x5b, 0x31, 0xba, 0xea, 0xea, 0xe8, 0xa2, 0x0d, 0x0a, 0x04, 0x32, 0xe6,
	0xe0, 0x10, 0x08, 0x7a, 0x0d, 0x13, 0x47, 0x7e, 0x7c, 0x70, 0xbc, 0x05, 0x2b, 0x07, 0xbf, 0x82,
	0x87, 0x73, 0x3f, 0xa8, 0x48, 0x13, 0xd6, 0x6c, 0x73, 0xf4, 0x4e, 0x7f, 0x40, 0xb6, 0xa0, 0xd9,
	0x1f, 0x5a, 0xb6, 0x6b, 0x7a, 0xb6, 0xae, 0x91, 0x6d, 0x68, 0x59, 0xce, 0xf1, 0xb1, 0xd3, 0x3d,
	0xef, 0x79, 0x7a, 0xed, 0x60, 0x08, 0x50, 0xfe, 0x98, 0x42, 0xa7, 0x63, 0x73, 0xe4, 0x71, 0x27,
	0xd7, 0xee, 0x99, 0x6f, 0x9d, 0xc1, 0x09, 0x75, 0xda, 0x84, 0x8d, 0xae, 0xd9, 0xeb, 0xa3, 0x50,
	0x43, 0xc1, 0xb4, 0xdd, 0xe1, 0x2b, 0xa7, 0xab, 0xd7, 0xc9, 0x0e, 0x6c, 0xf6, 0x4c, 0xcf, 0x19,
	0x8c, 0xfb, 0xe7, 0x23, 0xaa, 0x58, 0x3b, 0xf8, 0xab, 0x06, 0x3b, 0x95, 0x57, 0x1a, 0xc2, 0xbe,
	0x1b, 0x9e, 0x98, 0x14, 0xb6, 0x0d, 0x70, 0x6a, 0x7a, 0xa7, 0xe6, 0x98, 0xc9, 0x1a, 0x7d, 0x2f,
	0xb4, 0x5f, 0x9f, 0x0f, 0x2c, 0xb3, 0xe7, 0x0c, 0x1c, 0xae, 0xab, 0x61, 0x84, 0x18, 0x04, 0x17,
	0xeb, 0xe8, 0xd2, 0xb7, 0x2d, 0xc7, 0xa3, 0xbb, 0x0c, 0x07, 0x7a, 0x48, 0x1e, 0xc2, 0xb6, 0xd7,
	0x1f, 0x4b, 0xaa, 0x2b, 0x02, 0xb0, 0x6e, 0x99, 0x83, 0xae, 0xad, 0xff, 0x53, 0xa3, 0x81, 0x6f,
	0x9c, 0x3a, 0x67, 0xe3, 0xd3, 0xe1, 0x99, 0xfe, 0xbd, 0x86, 0x2b, 0xbf, 0x3b, 0xef, 0xbf, 0x32,
	0xf5, 0x7f, 0x69, 0x07, 0x0e, 0x40, 0xf9, 0x8c, 0x42, 0x18, 0x73, 0x60, 0xb9, 0x43, 0xc7, 0x1a,
	0x9f, 0x9d, 0x0e, 0x07, 0x36, 0x0d, 0x8e, 0x06, 0x93, 0xab, 0x3c, 0xf3, 0x55, 0xcf, 0xf6, 0x74,
	0x04, 0x68, 0x38, 0x7c, 0xbd, 0x86, 0xc7, 0x70, 0xce, 0x4c, 0x4b, 0xaf, 0x1f, 0xfc, 0x09, 0x5a,
	0x45, 0x3d, 0x33, 0x0a, 0x86, 0x27, 0x94, 0x02, 0xfb, 0xc2, 0x1e, 0x20, 0x77, 0x3a, 0x6c, 0x51,
	0xc5, 0xf0, 0xdc, 0x13, 0x1a, 0x0d, 0x4d, 0x2c, 0xfb, 0xc2, 0xe9, 0xda, 0xe3, 0xf3, 0x91, 0x6d,
	0x51, 0x28, 0x6a, 0xf2, 0xcd, 0x90, 0xba, 0x8c, 0xec, 0xd1, 0x88, 0x1f, 0x6b, 0x17, 0x1e, 0x1e,
	0x0f, 0x7b, 0xbd, 0xe1, 0x9b, 0xb1, 0x33, 0x18, 0x79, 0xee, 0x79, 0xd7, 0x1b, 0xba, 0xf4, 0x68,
	0xbb, 0xa0, 0xf7, 0x9c, 0xd7, 0xf6, 0xf8, 0xcc, 0xa5, 0x96, 0xe3, 0x37, 0xa6, 0xd7, 0x3d, 0xa5,
	0xa7, 0x3c, 0xfa, 0x4f, 0x03, 0x5a, 0xc5, 0x9f, 0x12, 0xa4, 0x0f, 0x2d, 0x1c, 0x88, 0xec, 0xbf,
	0x09, 0xf2, 0x99, 0x32, 0xcc, 0xaa, 0xff, 0x70, 0xec, 0xfd, 0x78, 0xd5, 0x32, 0x56, 0xf9, 0x03,
	0x72, 0xc2, 0x7a, 0x44, 0xfe, 0x5e, 0x20, 0x72, 0x73, 0x57, 0x1f, 0x1f, 0x7b, 0x3f, 0x5a, 0xb6,
	0x54, 0x00, 0x49, 0x93, 0x53, 0x01, 0x52, 0xe7, 0xb1, 0x02, 0x54, 0x1d, 0xb6, 0x14, 0xc8, 0x62,
	0x0d, 0x3f, 0xc7, 0xe9, 0x2c, 0xdc, 0x15, 0x61, 0xf6, 0x96, 0xac, 0x70, 0x94, 0x0b, 0xd0, 0xab,
	0x23, 0x94, 0x3c, 0x93, 0x1b, 0xc0, 0xfc, 0xc4, 0xde, 0xdb, 0x5f, 0xb9, 0xce, 0x71, 0xfb, 0xac,
	0x89, 0x4a, 0xa0, 0x15, 0x5a, 0x54, 0xc4, 0xcf, 0x96, 0x2f, 0x72, 0xb8, 0x33, 0xf6, 0xc6, 0x93,
	0x86, 0x1e, 0x79, 0xba, 0xcc, 0x85, 0x25, 0xe1, 0xd9, 0x8a, 0xd5, 0x82, 0xbe, 0x72, 0x42, 0x28,
	0xf4, 0x29, 0x23, 0x47, 0xa1, 0xaf, 0x32, 0x52, 0x28, 0xca, 0x57, 0xb0, 0x21, 0x66, 0x05, 0xd9,
	0x55, 0xb7, 0xcc, 0xfd, 0x7f, 0xb0, 0x48, 0xcd, 0x9d, 0x7f, 0x03, 0xcd, 0x7c, 0xd0, 0x90, 0x27,
	0xf3, 0x66, 0xec, 0x20, 0x9d, 0x85, 0x7a, 0xee, 0xff, 0x12, 0xd6, 0x59, 0x87, 0x24, 0xf2, 0x38,
	0xca, 0xbb, 0xf1, 0xde, 0xee, 0xbc, 0xb2, 0xa8, 0x40, 0xa9, 0x8d, 0x2b, 0x15, 0xa8, 0x0e, 0x06,
	0xa5, 0x02, 0xe7, 0x3a, 0xff, 0x83, 0xf7, 0x0d, 0xf6, 0x07, 0xe2, 0x17, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x55, 0x75, 0xf9, 0x9f, 0x53, 0x14, 0x00, 0x00,
}
