// Code generated by protoc-gen-go.
// source: serverrpc.proto
// DO NOT EDIT!

/*
Package serversvc is a generated protocol buffer package.

It is generated from these files:
	serverrpc.proto

It has these top-level messages:
	ServerSvcStatusReq
	ServerSvcStatusReply
	SessionInfo
	ReviewInfo
	CreditCard
	BankInfo
	InstructorInfo
	Device
	UserInfo
	GetSessionsReq
	GetSessionsReply
	GetSessionsForInstructorReq
	GetSessionsForInstructorReply
	GetSessionsForFitnessReq
	GetSessionsForFitnessReply
	GetSessionReply
	GetSessionReq
	PostSessionReq
	PostSessionReply
	EnrollInstructorReq
	EnrollInstructorReply
	GetInstructorReq
	GetInstructorReply
	GetInstructorsReq
	GetInstructorsReply
	GetUserReq
	GetUserReply
	EnrollUserReq
	EnrollUserReply
	GetUsersReq
	GetUsersReply
	Event
	RecordActivity
	RecordEventReq
	RecordEventReply
	LoginReq
	LoginReply
	SubscribeUserReq
	SubscribeUserReply
	InstructorImage
	PostInstructorDisplayImgReq
	PostInstructorDisplayImgReply
	SessionVideo
	PostSessionPreviewVideoReq
	PostSessionPreviewVideoReply
	CleanupAllDBsReq
	CleanupAllDBsReply
*/
package serversvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PersonRole int32

const (
	PersonRole_ROLE_USER       PersonRole = 0
	PersonRole_ROLE_INSTRUCTOR PersonRole = 1
)

var PersonRole_name = map[int32]string{
	0: "ROLE_USER",
	1: "ROLE_INSTRUCTOR",
}
var PersonRole_value = map[string]int32{
	"ROLE_USER":       0,
	"ROLE_INSTRUCTOR": 1,
}

func (x PersonRole) String() string {
	return proto.EnumName(PersonRole_name, int32(x))
}
func (PersonRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SessionDifficulty int32

const (
	SessionDifficulty_EASY      SessionDifficulty = 0
	SessionDifficulty_MODERATE  SessionDifficulty = 1
	SessionDifficulty_DIFFICULT SessionDifficulty = 2
)

var SessionDifficulty_name = map[int32]string{
	0: "EASY",
	1: "MODERATE",
	2: "DIFFICULT",
}
var SessionDifficulty_value = map[string]int32{
	"EASY":      0,
	"MODERATE":  1,
	"DIFFICULT": 2,
}

func (x SessionDifficulty) String() string {
	return proto.EnumName(SessionDifficulty_name, int32(x))
}
func (SessionDifficulty) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// General attributes used to describe a session.
type SessionTag int32

const (
	SessionTag_FAST        SessionTag = 0
	SessionTag_RELAXING    SessionTag = 1
	SessionTag_CALMING     SessionTag = 2
	SessionTag_AEROBIC     SessionTag = 3
	SessionTag_LATIN_MUSIC SessionTag = 4
)

var SessionTag_name = map[int32]string{
	0: "FAST",
	1: "RELAXING",
	2: "CALMING",
	3: "AEROBIC",
	4: "LATIN_MUSIC",
}
var SessionTag_value = map[string]int32{
	"FAST":        0,
	"RELAXING":    1,
	"CALMING":     2,
	"AEROBIC":     3,
	"LATIN_MUSIC": 4,
}

func (x SessionTag) String() string {
	return proto.EnumName(SessionTag_name, int32(x))
}
func (SessionTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type FitnessCategory int32

const (
	FitnessCategory_NONE           FitnessCategory = 0
	FitnessCategory_YOGA           FitnessCategory = 10
	FitnessCategory_HATHA_YOGA     FitnessCategory = 11
	FitnessCategory_KUNDALINI_YOGA FitnessCategory = 12
	FitnessCategory_FAST_YOGA      FitnessCategory = 13
	FitnessCategory_MEDITATION     FitnessCategory = 101
	FitnessCategory_TM_MEDITATION  FitnessCategory = 102
	FitnessCategory_DANCE          FitnessCategory = 201
	FitnessCategory_HIP_HOP        FitnessCategory = 202
	FitnessCategory_ZUMBA          FitnessCategory = 203
	FitnessCategory_HIIT           FitnessCategory = 301
)

var FitnessCategory_name = map[int32]string{
	0:   "NONE",
	10:  "YOGA",
	11:  "HATHA_YOGA",
	12:  "KUNDALINI_YOGA",
	13:  "FAST_YOGA",
	101: "MEDITATION",
	102: "TM_MEDITATION",
	201: "DANCE",
	202: "HIP_HOP",
	203: "ZUMBA",
	301: "HIIT",
}
var FitnessCategory_value = map[string]int32{
	"NONE":           0,
	"YOGA":           10,
	"HATHA_YOGA":     11,
	"KUNDALINI_YOGA": 12,
	"FAST_YOGA":      13,
	"MEDITATION":     101,
	"TM_MEDITATION":  102,
	"DANCE":          201,
	"HIP_HOP":        202,
	"ZUMBA":          203,
	"HIIT":           301,
}

func (x FitnessCategory) String() string {
	return proto.EnumName(FitnessCategory_name, int32(x))
}
func (FitnessCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EventType int32

const (
	EventType_LOGIN_EVENT       EventType = 0
	EventType_LOGOUT_EVENT      EventType = 1
	EventType_DEVICE_USED       EventType = 2
	EventType_JOIN_SESSION      EventType = 101
	EventType_FOLLOW_INSTRUCTOR EventType = 102
	EventType_LIKE_PRESS_WATCH  EventType = 201
)

var EventType_name = map[int32]string{
	0:   "LOGIN_EVENT",
	1:   "LOGOUT_EVENT",
	2:   "DEVICE_USED",
	101: "JOIN_SESSION",
	102: "FOLLOW_INSTRUCTOR",
	201: "LIKE_PRESS_WATCH",
}
var EventType_value = map[string]int32{
	"LOGIN_EVENT":       0,
	"LOGOUT_EVENT":      1,
	"DEVICE_USED":       2,
	"JOIN_SESSION":      101,
	"FOLLOW_INSTRUCTOR": 102,
	"LIKE_PRESS_WATCH":  201,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ServerSvcStatusReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ServerSvcStatusReq) Reset()                    { *m = ServerSvcStatusReq{} }
func (m *ServerSvcStatusReq) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusReq) ProtoMessage()               {}
func (*ServerSvcStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerSvcStatusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ServerSvcStatusReply struct {
	// ErrorData errData = 1;
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ServerSvcStatusReply) Reset()                    { *m = ServerSvcStatusReply{} }
func (m *ServerSvcStatusReply) String() string            { return proto.CompactTextString(m) }
func (*ServerSvcStatusReply) ProtoMessage()               {}
func (*ServerSvcStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerSvcStatusReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SessionInfo struct {
	// Timestamp sessionTime = 1;
	SessionTime      string `protobuf:"bytes,1,opt,name=sessionTime" json:"sessionTime,omitempty"`
	SessionDesc      string `protobuf:"bytes,2,opt,name=sessionDesc" json:"sessionDesc,omitempty"`
	InstructorInfoID int32  `protobuf:"varint,3,opt,name=instructorInfoID" json:"instructorInfoID,omitempty"`
	// repeated FitnessCategory sessionType = 4;
	SessionType     FitnessCategory   `protobuf:"varint,4,opt,name=sessionType,enum=serversvc.FitnessCategory" json:"sessionType,omitempty"`
	DifficultyLevel SessionDifficulty `protobuf:"varint,5,opt,name=difficultyLevel,enum=serversvc.SessionDifficulty" json:"difficultyLevel,omitempty"`
	// repeated SessionTag tagList = 6;
	TagList         SessionTag `protobuf:"varint,6,opt,name=tagList,enum=serversvc.SessionTag" json:"tagList,omitempty"`
	ID              int32      `protobuf:"varint,7,opt,name=ID,json=iD" json:"ID,omitempty"`
	InstructorName  string     `protobuf:"bytes,8,opt,name=instructorName" json:"instructorName,omitempty"`
	PreviewVideoUrl string     `protobuf:"bytes,9,opt,name=previewVideoUrl" json:"previewVideoUrl,omitempty"`
	// Maintained by server
	SessionUsersEnrolled uint64 `protobuf:"varint,101,opt,name=sessionUsersEnrolled" json:"sessionUsersEnrolled,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SessionInfo) GetSessionTime() string {
	if m != nil {
		return m.SessionTime
	}
	return ""
}

func (m *SessionInfo) GetSessionDesc() string {
	if m != nil {
		return m.SessionDesc
	}
	return ""
}

func (m *SessionInfo) GetInstructorInfoID() int32 {
	if m != nil {
		return m.InstructorInfoID
	}
	return 0
}

func (m *SessionInfo) GetSessionType() FitnessCategory {
	if m != nil {
		return m.SessionType
	}
	return FitnessCategory_NONE
}

func (m *SessionInfo) GetDifficultyLevel() SessionDifficulty {
	if m != nil {
		return m.DifficultyLevel
	}
	return SessionDifficulty_EASY
}

func (m *SessionInfo) GetTagList() SessionTag {
	if m != nil {
		return m.TagList
	}
	return SessionTag_FAST
}

func (m *SessionInfo) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SessionInfo) GetInstructorName() string {
	if m != nil {
		return m.InstructorName
	}
	return ""
}

func (m *SessionInfo) GetPreviewVideoUrl() string {
	if m != nil {
		return m.PreviewVideoUrl
	}
	return ""
}

func (m *SessionInfo) GetSessionUsersEnrolled() uint64 {
	if m != nil {
		return m.SessionUsersEnrolled
	}
	return 0
}

type ReviewInfo struct {
	ReviewList []*ReviewInfo_Review `protobuf:"bytes,1,rep,name=reviewList" json:"reviewList,omitempty"`
}

func (m *ReviewInfo) Reset()                    { *m = ReviewInfo{} }
func (m *ReviewInfo) String() string            { return proto.CompactTextString(m) }
func (*ReviewInfo) ProtoMessage()               {}
func (*ReviewInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReviewInfo) GetReviewList() []*ReviewInfo_Review {
	if m != nil {
		return m.ReviewList
	}
	return nil
}

type ReviewInfo_Review struct {
	Rating float32 `protobuf:"fixed32,1,opt,name=rating" json:"rating,omitempty"`
	Review string  `protobuf:"bytes,2,opt,name=review" json:"review,omitempty"`
}

func (m *ReviewInfo_Review) Reset()                    { *m = ReviewInfo_Review{} }
func (m *ReviewInfo_Review) String() string            { return proto.CompactTextString(m) }
func (*ReviewInfo_Review) ProtoMessage()               {}
func (*ReviewInfo_Review) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *ReviewInfo_Review) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ReviewInfo_Review) GetReview() string {
	if m != nil {
		return m.Review
	}
	return ""
}

type CreditCard struct {
	Name        string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Number      string `protobuf:"bytes,2,opt,name=Number,json=number" json:"Number,omitempty"`
	ExpiryMonth string `protobuf:"bytes,3,opt,name=ExpiryMonth,json=expiryMonth" json:"ExpiryMonth,omitempty"`
	ExpiryYear  string `protobuf:"bytes,4,opt,name=ExpiryYear,json=expiryYear" json:"ExpiryYear,omitempty"`
	CCV         string `protobuf:"bytes,5,opt,name=CCV,json=cCV" json:"CCV,omitempty"`
	IsDefault   bool   `protobuf:"varint,6,opt,name=isDefault" json:"isDefault,omitempty"`
	UserInfoID  int32  `protobuf:"varint,7,opt,name=userInfoID" json:"userInfoID,omitempty"`
}

func (m *CreditCard) Reset()                    { *m = CreditCard{} }
func (m *CreditCard) String() string            { return proto.CompactTextString(m) }
func (*CreditCard) ProtoMessage()               {}
func (*CreditCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreditCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreditCard) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *CreditCard) GetExpiryMonth() string {
	if m != nil {
		return m.ExpiryMonth
	}
	return ""
}

func (m *CreditCard) GetExpiryYear() string {
	if m != nil {
		return m.ExpiryYear
	}
	return ""
}

func (m *CreditCard) GetCCV() string {
	if m != nil {
		return m.CCV
	}
	return ""
}

func (m *CreditCard) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *CreditCard) GetUserInfoID() int32 {
	if m != nil {
		return m.UserInfoID
	}
	return 0
}

type BankInfo struct {
	RoutingNum       string `protobuf:"bytes,1,opt,name=RoutingNum,json=routingNum" json:"RoutingNum,omitempty"`
	AcctNum          string `protobuf:"bytes,2,opt,name=AcctNum,json=acctNum" json:"AcctNum,omitempty"`
	BankName         string `protobuf:"bytes,3,opt,name=BankName,json=bankName" json:"BankName,omitempty"`
	InstructorInfoID int32  `protobuf:"varint,4,opt,name=instructorInfoID" json:"instructorInfoID,omitempty"`
}

func (m *BankInfo) Reset()                    { *m = BankInfo{} }
func (m *BankInfo) String() string            { return proto.CompactTextString(m) }
func (*BankInfo) ProtoMessage()               {}
func (*BankInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BankInfo) GetRoutingNum() string {
	if m != nil {
		return m.RoutingNum
	}
	return ""
}

func (m *BankInfo) GetAcctNum() string {
	if m != nil {
		return m.AcctNum
	}
	return ""
}

func (m *BankInfo) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *BankInfo) GetInstructorInfoID() int32 {
	if m != nil {
		return m.InstructorInfoID
	}
	return 0
}

type InstructorInfo struct {
	FirstName     string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	Age           string `protobuf:"bytes,2,opt,name=age" json:"age,omitempty"`
	Sex           string `protobuf:"bytes,3,opt,name=sex" json:"sex,omitempty"`
	Location      string `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Email         string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	PassWord      string `protobuf:"bytes,7,opt,name=passWord" json:"passWord,omitempty"`
	Desc          string `protobuf:"bytes,8,opt,name=desc" json:"desc,omitempty"`
	Certification string `protobuf:"bytes,9,opt,name=certification" json:"certification,omitempty"`
	// repeated FitnessCategory fitnessSpecialties = 10;
	// XXX sqlite doesn't support array
	FitnessType FitnessCategory `protobuf:"varint,10,opt,name=fitnessType,enum=serversvc.FitnessCategory" json:"fitnessType,omitempty"`
	LastName    string          `protobuf:"bytes,11,opt,name=lastName" json:"lastName,omitempty"`
	City        string          `protobuf:"bytes,12,opt,name=city" json:"city,omitempty"`
	Country     string          `protobuf:"bytes,13,opt,name=country" json:"country,omitempty"`
	ID          int32           `protobuf:"varint,14,opt,name=ID,json=iD" json:"ID,omitempty"`
	// InstructorImage displayImage = 15;
	DisplayImage     []byte `protobuf:"bytes,15,opt,name=displayImage,proto3" json:"displayImage,omitempty"`
	DisplayImageDesc string `protobuf:"bytes,16,opt,name=displayImageDesc" json:"displayImageDesc,omitempty"`
	// Internal to server
	ReviewInfoID string `protobuf:"bytes,101,opt,name=reviewInfoID" json:"reviewInfoID,omitempty"`
	BankInfoID   string `protobuf:"bytes,102,opt,name=bankInfoID" json:"bankInfoID,omitempty"`
}

func (m *InstructorInfo) Reset()                    { *m = InstructorInfo{} }
func (m *InstructorInfo) String() string            { return proto.CompactTextString(m) }
func (*InstructorInfo) ProtoMessage()               {}
func (*InstructorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InstructorInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *InstructorInfo) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *InstructorInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *InstructorInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *InstructorInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *InstructorInfo) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *InstructorInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *InstructorInfo) GetCertification() string {
	if m != nil {
		return m.Certification
	}
	return ""
}

func (m *InstructorInfo) GetFitnessType() FitnessCategory {
	if m != nil {
		return m.FitnessType
	}
	return FitnessCategory_NONE
}

func (m *InstructorInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *InstructorInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *InstructorInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *InstructorInfo) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InstructorInfo) GetDisplayImage() []byte {
	if m != nil {
		return m.DisplayImage
	}
	return nil
}

func (m *InstructorInfo) GetDisplayImageDesc() string {
	if m != nil {
		return m.DisplayImageDesc
	}
	return ""
}

func (m *InstructorInfo) GetReviewInfoID() string {
	if m != nil {
		return m.ReviewInfoID
	}
	return ""
}

func (m *InstructorInfo) GetBankInfoID() string {
	if m != nil {
		return m.BankInfoID
	}
	return ""
}

type Device struct {
	DeviceID   string `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	DeviceDesc string `protobuf:"bytes,2,opt,name=deviceDesc" json:"deviceDesc,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Device) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *Device) GetDeviceDesc() string {
	if m != nil {
		return m.DeviceDesc
	}
	return ""
}

type UserInfo struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	Age       string `protobuf:"bytes,2,opt,name=age" json:"age,omitempty"`
	Sex       string `protobuf:"bytes,3,opt,name=sex" json:"sex,omitempty"`
	City      string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Country   string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	PassWord  string `protobuf:"bytes,8,opt,name=passWord" json:"passWord,omitempty"`
	LastName  string `protobuf:"bytes,9,opt,name=lastName" json:"lastName,omitempty"`
	ID        int32  `protobuf:"varint,10,opt,name=ID,json=iD" json:"ID,omitempty"`
	// Internal to server
	// repeated string friendsIDs = 101;
	// repeated string followIDs =102;
	// Pointer to event activity in DB
	RecordActivityID string `protobuf:"bytes,103,opt,name=RecordActivityID,json=recordActivityID" json:"RecordActivityID,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *UserInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserInfo) GetRecordActivityID() string {
	if m != nil {
		return m.RecordActivityID
	}
	return ""
}

type GetSessionsReq struct {
}

func (m *GetSessionsReq) Reset()                    { *m = GetSessionsReq{} }
func (m *GetSessionsReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsReq) ProtoMessage()               {}
func (*GetSessionsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetSessionsReply struct {
	SessionList    []*SessionInfo    `protobuf:"bytes,1,rep,name=sessionList" json:"sessionList,omitempty"`
	InstructorList []*InstructorInfo `protobuf:"bytes,2,rep,name=instructorList" json:"instructorList,omitempty"`
}

func (m *GetSessionsReply) Reset()                    { *m = GetSessionsReply{} }
func (m *GetSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsReply) ProtoMessage()               {}
func (*GetSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetSessionsReply) GetSessionList() []*SessionInfo {
	if m != nil {
		return m.SessionList
	}
	return nil
}

func (m *GetSessionsReply) GetInstructorList() []*InstructorInfo {
	if m != nil {
		return m.InstructorList
	}
	return nil
}

type GetSessionsForInstructorReq struct {
	InstructorInfoID int32 `protobuf:"varint,1,opt,name=instructorInfoID" json:"instructorInfoID,omitempty"`
}

func (m *GetSessionsForInstructorReq) Reset()                    { *m = GetSessionsForInstructorReq{} }
func (m *GetSessionsForInstructorReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsForInstructorReq) ProtoMessage()               {}
func (*GetSessionsForInstructorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetSessionsForInstructorReq) GetInstructorInfoID() int32 {
	if m != nil {
		return m.InstructorInfoID
	}
	return 0
}

type GetSessionsForInstructorReply struct {
	SessionList []*SessionInfo `protobuf:"bytes,1,rep,name=sessionList" json:"sessionList,omitempty"`
}

func (m *GetSessionsForInstructorReply) Reset()                    { *m = GetSessionsForInstructorReply{} }
func (m *GetSessionsForInstructorReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsForInstructorReply) ProtoMessage()               {}
func (*GetSessionsForInstructorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetSessionsForInstructorReply) GetSessionList() []*SessionInfo {
	if m != nil {
		return m.SessionList
	}
	return nil
}

type GetSessionsForFitnessReq struct {
	FitCategory FitnessCategory `protobuf:"varint,1,opt,name=fitCategory,enum=serversvc.FitnessCategory" json:"fitCategory,omitempty"`
}

func (m *GetSessionsForFitnessReq) Reset()                    { *m = GetSessionsForFitnessReq{} }
func (m *GetSessionsForFitnessReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsForFitnessReq) ProtoMessage()               {}
func (*GetSessionsForFitnessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSessionsForFitnessReq) GetFitCategory() FitnessCategory {
	if m != nil {
		return m.FitCategory
	}
	return FitnessCategory_NONE
}

type GetSessionsForFitnessReply struct {
	SessionList []*SessionInfo `protobuf:"bytes,1,rep,name=sessionList" json:"sessionList,omitempty"`
}

func (m *GetSessionsForFitnessReply) Reset()                    { *m = GetSessionsForFitnessReply{} }
func (m *GetSessionsForFitnessReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionsForFitnessReply) ProtoMessage()               {}
func (*GetSessionsForFitnessReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSessionsForFitnessReply) GetSessionList() []*SessionInfo {
	if m != nil {
		return m.SessionList
	}
	return nil
}

type GetSessionReply struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetSessionReply) Reset()                    { *m = GetSessionReply{} }
func (m *GetSessionReply) String() string            { return proto.CompactTextString(m) }
func (*GetSessionReply) ProtoMessage()               {}
func (*GetSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSessionReply) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetSessionReq struct {
	SessionKey int32 `protobuf:"varint,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
}

func (m *GetSessionReq) Reset()                    { *m = GetSessionReq{} }
func (m *GetSessionReq) String() string            { return proto.CompactTextString(m) }
func (*GetSessionReq) ProtoMessage()               {}
func (*GetSessionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSessionReq) GetSessionKey() int32 {
	if m != nil {
		return m.SessionKey
	}
	return 0
}

type PostSessionReq struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *PostSessionReq) Reset()                    { *m = PostSessionReq{} }
func (m *PostSessionReq) String() string            { return proto.CompactTextString(m) }
func (*PostSessionReq) ProtoMessage()               {}
func (*PostSessionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PostSessionReq) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type PostSessionReply struct {
	SessionKey int32 `protobuf:"varint,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
}

func (m *PostSessionReply) Reset()                    { *m = PostSessionReply{} }
func (m *PostSessionReply) String() string            { return proto.CompactTextString(m) }
func (*PostSessionReply) ProtoMessage()               {}
func (*PostSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PostSessionReply) GetSessionKey() int32 {
	if m != nil {
		return m.SessionKey
	}
	return 0
}

type EnrollInstructorReq struct {
	Instructor *InstructorInfo `protobuf:"bytes,1,opt,name=instructor" json:"instructor,omitempty"`
}

func (m *EnrollInstructorReq) Reset()                    { *m = EnrollInstructorReq{} }
func (m *EnrollInstructorReq) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorReq) ProtoMessage()               {}
func (*EnrollInstructorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *EnrollInstructorReq) GetInstructor() *InstructorInfo {
	if m != nil {
		return m.Instructor
	}
	return nil
}

type EnrollInstructorReply struct {
	InstructorKey int32 `protobuf:"varint,1,opt,name=instructorKey" json:"instructorKey,omitempty"`
}

func (m *EnrollInstructorReply) Reset()                    { *m = EnrollInstructorReply{} }
func (m *EnrollInstructorReply) String() string            { return proto.CompactTextString(m) }
func (*EnrollInstructorReply) ProtoMessage()               {}
func (*EnrollInstructorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *EnrollInstructorReply) GetInstructorKey() int32 {
	if m != nil {
		return m.InstructorKey
	}
	return 0
}

type GetInstructorReq struct {
	InstructorKey int32 `protobuf:"varint,1,opt,name=instructorKey" json:"instructorKey,omitempty"`
}

func (m *GetInstructorReq) Reset()                    { *m = GetInstructorReq{} }
func (m *GetInstructorReq) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorReq) ProtoMessage()               {}
func (*GetInstructorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetInstructorReq) GetInstructorKey() int32 {
	if m != nil {
		return m.InstructorKey
	}
	return 0
}

type GetInstructorReply struct {
	Info *InstructorInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetInstructorReply) Reset()                    { *m = GetInstructorReply{} }
func (m *GetInstructorReply) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorReply) ProtoMessage()               {}
func (*GetInstructorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetInstructorReply) GetInfo() *InstructorInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetInstructorsReq struct {
}

func (m *GetInstructorsReq) Reset()                    { *m = GetInstructorsReq{} }
func (m *GetInstructorsReq) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorsReq) ProtoMessage()               {}
func (*GetInstructorsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type GetInstructorsReply struct {
	InstructorList []*InstructorInfo `protobuf:"bytes,1,rep,name=instructorList" json:"instructorList,omitempty"`
}

func (m *GetInstructorsReply) Reset()                    { *m = GetInstructorsReply{} }
func (m *GetInstructorsReply) String() string            { return proto.CompactTextString(m) }
func (*GetInstructorsReply) ProtoMessage()               {}
func (*GetInstructorsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetInstructorsReply) GetInstructorList() []*InstructorInfo {
	if m != nil {
		return m.InstructorList
	}
	return nil
}

type GetUserReq struct {
	UserKey int32 `protobuf:"varint,1,opt,name=userKey" json:"userKey,omitempty"`
}

func (m *GetUserReq) Reset()                    { *m = GetUserReq{} }
func (m *GetUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserReq) ProtoMessage()               {}
func (*GetUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetUserReq) GetUserKey() int32 {
	if m != nil {
		return m.UserKey
	}
	return 0
}

type GetUserReply struct {
	Info *UserInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetUserReply) Reset()                    { *m = GetUserReply{} }
func (m *GetUserReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserReply) ProtoMessage()               {}
func (*GetUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetUserReply) GetInfo() *UserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type EnrollUserReq struct {
	User *UserInfo `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *EnrollUserReq) Reset()                    { *m = EnrollUserReq{} }
func (m *EnrollUserReq) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserReq) ProtoMessage()               {}
func (*EnrollUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *EnrollUserReq) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type EnrollUserReply struct {
	UserKey int32 `protobuf:"varint,1,opt,name=userKey" json:"userKey,omitempty"`
}

func (m *EnrollUserReply) Reset()                    { *m = EnrollUserReply{} }
func (m *EnrollUserReply) String() string            { return proto.CompactTextString(m) }
func (*EnrollUserReply) ProtoMessage()               {}
func (*EnrollUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *EnrollUserReply) GetUserKey() int32 {
	if m != nil {
		return m.UserKey
	}
	return 0
}

type GetUsersReq struct {
}

func (m *GetUsersReq) Reset()                    { *m = GetUsersReq{} }
func (m *GetUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersReq) ProtoMessage()               {}
func (*GetUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type GetUsersReply struct {
	UserList []*UserInfo `protobuf:"bytes,1,rep,name=userList" json:"userList,omitempty"`
}

func (m *GetUsersReply) Reset()                    { *m = GetUsersReply{} }
func (m *GetUsersReply) String() string            { return proto.CompactTextString(m) }
func (*GetUsersReply) ProtoMessage()               {}
func (*GetUsersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetUsersReply) GetUserList() []*UserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

type Event struct {
	EventType EventType `protobuf:"varint,1,opt,name=eventType,enum=serversvc.EventType" json:"eventType,omitempty"`
	// Duration eventDuration = 2;
	// google.protobuf.Timestamp eventTS = 3;
	EventDesc string `protobuf:"bytes,4,opt,name=eventDesc" json:"eventDesc,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Event) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_LOGIN_EVENT
}

func (m *Event) GetEventDesc() string {
	if m != nil {
		return m.EventDesc
	}
	return ""
}

type RecordActivity struct {
	EventList []*Event `protobuf:"bytes,1,rep,name=eventList" json:"eventList,omitempty"`
}

func (m *RecordActivity) Reset()                    { *m = RecordActivity{} }
func (m *RecordActivity) String() string            { return proto.CompactTextString(m) }
func (*RecordActivity) ProtoMessage()               {}
func (*RecordActivity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RecordActivity) GetEventList() []*Event {
	if m != nil {
		return m.EventList
	}
	return nil
}

type RecordEventReq struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *RecordEventReq) Reset()                    { *m = RecordEventReq{} }
func (m *RecordEventReq) String() string            { return proto.CompactTextString(m) }
func (*RecordEventReq) ProtoMessage()               {}
func (*RecordEventReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RecordEventReq) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type RecordEventReply struct {
}

func (m *RecordEventReply) Reset()                    { *m = RecordEventReply{} }
func (m *RecordEventReply) String() string            { return proto.CompactTextString(m) }
func (*RecordEventReply) ProtoMessage()               {}
func (*RecordEventReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type LoginReq struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	PassWord string `protobuf:"bytes,2,opt,name=passWord" json:"passWord,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *LoginReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginReq) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

type LoginReply struct {
	UserOrInstructorID string          `protobuf:"bytes,1,opt,name=userOrInstructorID" json:"userOrInstructorID,omitempty"`
	PersonType         PersonRole      `protobuf:"varint,2,opt,name=personType,enum=serversvc.PersonRole" json:"personType,omitempty"`
	User               *UserInfo       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Instructor         *InstructorInfo `protobuf:"bytes,4,opt,name=instructor" json:"instructor,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LoginReply) GetUserOrInstructorID() string {
	if m != nil {
		return m.UserOrInstructorID
	}
	return ""
}

func (m *LoginReply) GetPersonType() PersonRole {
	if m != nil {
		return m.PersonType
	}
	return PersonRole_ROLE_USER
}

func (m *LoginReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LoginReply) GetInstructor() *InstructorInfo {
	if m != nil {
		return m.Instructor
	}
	return nil
}

type SubscribeUserReq struct {
	UserID      int32       `protobuf:"varint,1,opt,name=userID" json:"userID,omitempty"`
	PaymentCard *CreditCard `protobuf:"bytes,2,opt,name=paymentCard" json:"paymentCard,omitempty"`
}

func (m *SubscribeUserReq) Reset()                    { *m = SubscribeUserReq{} }
func (m *SubscribeUserReq) String() string            { return proto.CompactTextString(m) }
func (*SubscribeUserReq) ProtoMessage()               {}
func (*SubscribeUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SubscribeUserReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *SubscribeUserReq) GetPaymentCard() *CreditCard {
	if m != nil {
		return m.PaymentCard
	}
	return nil
}

type SubscribeUserReply struct {
}

func (m *SubscribeUserReply) Reset()                    { *m = SubscribeUserReply{} }
func (m *SubscribeUserReply) String() string            { return proto.CompactTextString(m) }
func (*SubscribeUserReply) ProtoMessage()               {}
func (*SubscribeUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type InstructorImage struct {
	PicDesc          string `protobuf:"bytes,1,opt,name=picDesc" json:"picDesc,omitempty"`
	InstructorInfoID int32  `protobuf:"varint,2,opt,name=InstructorInfoID,json=instructorInfoID" json:"InstructorInfoID,omitempty"`
	ID               int32  `protobuf:"varint,3,opt,name=ID,json=iD" json:"ID,omitempty"`
	Blob             []byte `protobuf:"bytes,4,opt,name=blob,proto3" json:"blob,omitempty"`
	IsDisplay        bool   `protobuf:"varint,5,opt,name=isDisplay" json:"isDisplay,omitempty"`
}

func (m *InstructorImage) Reset()                    { *m = InstructorImage{} }
func (m *InstructorImage) String() string            { return proto.CompactTextString(m) }
func (*InstructorImage) ProtoMessage()               {}
func (*InstructorImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *InstructorImage) GetPicDesc() string {
	if m != nil {
		return m.PicDesc
	}
	return ""
}

func (m *InstructorImage) GetInstructorInfoID() int32 {
	if m != nil {
		return m.InstructorInfoID
	}
	return 0
}

func (m *InstructorImage) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InstructorImage) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *InstructorImage) GetIsDisplay() bool {
	if m != nil {
		return m.IsDisplay
	}
	return false
}

type PostInstructorDisplayImgReq struct {
	InstructorInfoID int32 `protobuf:"varint,1,opt,name=instructorInfoID" json:"instructorInfoID,omitempty"`
	// InstructorImage img = 2;
	Blob    []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	PicDesc string `protobuf:"bytes,3,opt,name=picDesc" json:"picDesc,omitempty"`
}

func (m *PostInstructorDisplayImgReq) Reset()                    { *m = PostInstructorDisplayImgReq{} }
func (m *PostInstructorDisplayImgReq) String() string            { return proto.CompactTextString(m) }
func (*PostInstructorDisplayImgReq) ProtoMessage()               {}
func (*PostInstructorDisplayImgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *PostInstructorDisplayImgReq) GetInstructorInfoID() int32 {
	if m != nil {
		return m.InstructorInfoID
	}
	return 0
}

func (m *PostInstructorDisplayImgReq) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *PostInstructorDisplayImgReq) GetPicDesc() string {
	if m != nil {
		return m.PicDesc
	}
	return ""
}

type PostInstructorDisplayImgReply struct {
}

func (m *PostInstructorDisplayImgReply) Reset()                    { *m = PostInstructorDisplayImgReply{} }
func (m *PostInstructorDisplayImgReply) String() string            { return proto.CompactTextString(m) }
func (*PostInstructorDisplayImgReply) ProtoMessage()               {}
func (*PostInstructorDisplayImgReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

type SessionVideo struct {
	VidDesc string `protobuf:"bytes,1,opt,name=vidDesc" json:"vidDesc,omitempty"`
	VidUrl  string `protobuf:"bytes,2,opt,name=vidUrl" json:"vidUrl,omitempty"`
	ID      int32  `protobuf:"varint,3,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *SessionVideo) Reset()                    { *m = SessionVideo{} }
func (m *SessionVideo) String() string            { return proto.CompactTextString(m) }
func (*SessionVideo) ProtoMessage()               {}
func (*SessionVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SessionVideo) GetVidDesc() string {
	if m != nil {
		return m.VidDesc
	}
	return ""
}

func (m *SessionVideo) GetVidUrl() string {
	if m != nil {
		return m.VidUrl
	}
	return ""
}

func (m *SessionVideo) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type PostSessionPreviewVideoReq struct {
	SessionID int32 `protobuf:"varint,1,opt,name=sessionID" json:"sessionID,omitempty"`
	// SessionVideo vid = 2;
	VidUrl string `protobuf:"bytes,2,opt,name=vidUrl" json:"vidUrl,omitempty"`
}

func (m *PostSessionPreviewVideoReq) Reset()                    { *m = PostSessionPreviewVideoReq{} }
func (m *PostSessionPreviewVideoReq) String() string            { return proto.CompactTextString(m) }
func (*PostSessionPreviewVideoReq) ProtoMessage()               {}
func (*PostSessionPreviewVideoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *PostSessionPreviewVideoReq) GetSessionID() int32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *PostSessionPreviewVideoReq) GetVidUrl() string {
	if m != nil {
		return m.VidUrl
	}
	return ""
}

type PostSessionPreviewVideoReply struct {
}

func (m *PostSessionPreviewVideoReply) Reset()                    { *m = PostSessionPreviewVideoReply{} }
func (m *PostSessionPreviewVideoReply) String() string            { return proto.CompactTextString(m) }
func (*PostSessionPreviewVideoReply) ProtoMessage()               {}
func (*PostSessionPreviewVideoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

type CleanupAllDBsReq struct {
}

func (m *CleanupAllDBsReq) Reset()                    { *m = CleanupAllDBsReq{} }
func (m *CleanupAllDBsReq) String() string            { return proto.CompactTextString(m) }
func (*CleanupAllDBsReq) ProtoMessage()               {}
func (*CleanupAllDBsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type CleanupAllDBsReply struct {
}

func (m *CleanupAllDBsReply) Reset()                    { *m = CleanupAllDBsReply{} }
func (m *CleanupAllDBsReply) String() string            { return proto.CompactTextString(m) }
func (*CleanupAllDBsReply) ProtoMessage()               {}
func (*CleanupAllDBsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func init() {
	proto.RegisterType((*ServerSvcStatusReq)(nil), "serversvc.ServerSvcStatusReq")
	proto.RegisterType((*ServerSvcStatusReply)(nil), "serversvc.ServerSvcStatusReply")
	proto.RegisterType((*SessionInfo)(nil), "serversvc.SessionInfo")
	proto.RegisterType((*ReviewInfo)(nil), "serversvc.ReviewInfo")
	proto.RegisterType((*ReviewInfo_Review)(nil), "serversvc.ReviewInfo.Review")
	proto.RegisterType((*CreditCard)(nil), "serversvc.CreditCard")
	proto.RegisterType((*BankInfo)(nil), "serversvc.BankInfo")
	proto.RegisterType((*InstructorInfo)(nil), "serversvc.InstructorInfo")
	proto.RegisterType((*Device)(nil), "serversvc.Device")
	proto.RegisterType((*UserInfo)(nil), "serversvc.UserInfo")
	proto.RegisterType((*GetSessionsReq)(nil), "serversvc.GetSessionsReq")
	proto.RegisterType((*GetSessionsReply)(nil), "serversvc.GetSessionsReply")
	proto.RegisterType((*GetSessionsForInstructorReq)(nil), "serversvc.GetSessionsForInstructorReq")
	proto.RegisterType((*GetSessionsForInstructorReply)(nil), "serversvc.GetSessionsForInstructorReply")
	proto.RegisterType((*GetSessionsForFitnessReq)(nil), "serversvc.GetSessionsForFitnessReq")
	proto.RegisterType((*GetSessionsForFitnessReply)(nil), "serversvc.GetSessionsForFitnessReply")
	proto.RegisterType((*GetSessionReply)(nil), "serversvc.GetSessionReply")
	proto.RegisterType((*GetSessionReq)(nil), "serversvc.GetSessionReq")
	proto.RegisterType((*PostSessionReq)(nil), "serversvc.PostSessionReq")
	proto.RegisterType((*PostSessionReply)(nil), "serversvc.PostSessionReply")
	proto.RegisterType((*EnrollInstructorReq)(nil), "serversvc.EnrollInstructorReq")
	proto.RegisterType((*EnrollInstructorReply)(nil), "serversvc.EnrollInstructorReply")
	proto.RegisterType((*GetInstructorReq)(nil), "serversvc.GetInstructorReq")
	proto.RegisterType((*GetInstructorReply)(nil), "serversvc.GetInstructorReply")
	proto.RegisterType((*GetInstructorsReq)(nil), "serversvc.GetInstructorsReq")
	proto.RegisterType((*GetInstructorsReply)(nil), "serversvc.GetInstructorsReply")
	proto.RegisterType((*GetUserReq)(nil), "serversvc.GetUserReq")
	proto.RegisterType((*GetUserReply)(nil), "serversvc.GetUserReply")
	proto.RegisterType((*EnrollUserReq)(nil), "serversvc.EnrollUserReq")
	proto.RegisterType((*EnrollUserReply)(nil), "serversvc.EnrollUserReply")
	proto.RegisterType((*GetUsersReq)(nil), "serversvc.GetUsersReq")
	proto.RegisterType((*GetUsersReply)(nil), "serversvc.GetUsersReply")
	proto.RegisterType((*Event)(nil), "serversvc.Event")
	proto.RegisterType((*RecordActivity)(nil), "serversvc.RecordActivity")
	proto.RegisterType((*RecordEventReq)(nil), "serversvc.RecordEventReq")
	proto.RegisterType((*RecordEventReply)(nil), "serversvc.RecordEventReply")
	proto.RegisterType((*LoginReq)(nil), "serversvc.LoginReq")
	proto.RegisterType((*LoginReply)(nil), "serversvc.LoginReply")
	proto.RegisterType((*SubscribeUserReq)(nil), "serversvc.SubscribeUserReq")
	proto.RegisterType((*SubscribeUserReply)(nil), "serversvc.SubscribeUserReply")
	proto.RegisterType((*InstructorImage)(nil), "serversvc.InstructorImage")
	proto.RegisterType((*PostInstructorDisplayImgReq)(nil), "serversvc.PostInstructorDisplayImgReq")
	proto.RegisterType((*PostInstructorDisplayImgReply)(nil), "serversvc.PostInstructorDisplayImgReply")
	proto.RegisterType((*SessionVideo)(nil), "serversvc.SessionVideo")
	proto.RegisterType((*PostSessionPreviewVideoReq)(nil), "serversvc.PostSessionPreviewVideoReq")
	proto.RegisterType((*PostSessionPreviewVideoReply)(nil), "serversvc.PostSessionPreviewVideoReply")
	proto.RegisterType((*CleanupAllDBsReq)(nil), "serversvc.CleanupAllDBsReq")
	proto.RegisterType((*CleanupAllDBsReply)(nil), "serversvc.CleanupAllDBsReply")
	proto.RegisterEnum("serversvc.PersonRole", PersonRole_name, PersonRole_value)
	proto.RegisterEnum("serversvc.SessionDifficulty", SessionDifficulty_name, SessionDifficulty_value)
	proto.RegisterEnum("serversvc.SessionTag", SessionTag_name, SessionTag_value)
	proto.RegisterEnum("serversvc.FitnessCategory", FitnessCategory_name, FitnessCategory_value)
	proto.RegisterEnum("serversvc.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerSvc service

type ServerSvcClient interface {
	// Is it running?
	// DONE
	GetStatus(ctx context.Context, in *ServerSvcStatusReq, opts ...grpc.CallOption) (*ServerSvcStatusReply, error)
	// Session handling
	PostSession(ctx context.Context, in *PostSessionReq, opts ...grpc.CallOption) (*PostSessionReply, error)
	GetSessions(ctx context.Context, in *GetSessionsReq, opts ...grpc.CallOption) (*GetSessionsReply, error)
	GetSessionsForInstructor(ctx context.Context, in *GetSessionsForInstructorReq, opts ...grpc.CallOption) (*GetSessionsForInstructorReply, error)
	GetSessionsForFitnessType(ctx context.Context, in *GetSessionsForFitnessReq, opts ...grpc.CallOption) (*GetSessionsForFitnessReply, error)
	GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionReply, error)
	// Post session preview
	PostSessionPreviewVideo(ctx context.Context, in *PostSessionPreviewVideoReq, opts ...grpc.CallOption) (*PostSessionPreviewVideoReply, error)
	// Instructor handling
	EnrollInstructor(ctx context.Context, in *EnrollInstructorReq, opts ...grpc.CallOption) (*EnrollInstructorReply, error)
	GetInstructor(ctx context.Context, in *GetInstructorReq, opts ...grpc.CallOption) (*GetInstructorReply, error)
	GetInstructors(ctx context.Context, in *GetInstructorsReq, opts ...grpc.CallOption) (*GetInstructorsReply, error)
	// Post a instructor pic
	PostInstructorDisplayImg(ctx context.Context, in *PostInstructorDisplayImgReq, opts ...grpc.CallOption) (*PostInstructorDisplayImgReply, error)
	// User handling
	EnrollUser(ctx context.Context, in *EnrollUserReq, opts ...grpc.CallOption) (*EnrollUserReply, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersReply, error)
	// Subscribe to the pay plan TBD
	SubscribeUser(ctx context.Context, in *SubscribeUserReq, opts ...grpc.CallOption) (*SubscribeUserReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// Used for analytics
	// Client will record much of the user interaction with the app
	RecordEvent(ctx context.Context, in *RecordEventReq, opts ...grpc.CallOption) (*RecordEventReply, error)
	CleanupAllDBs(ctx context.Context, in *CleanupAllDBsReq, opts ...grpc.CallOption) (*CleanupAllDBsReply, error)
}

type serverSvcClient struct {
	cc *grpc.ClientConn
}

func NewServerSvcClient(cc *grpc.ClientConn) ServerSvcClient {
	return &serverSvcClient{cc}
}

func (c *serverSvcClient) GetStatus(ctx context.Context, in *ServerSvcStatusReq, opts ...grpc.CallOption) (*ServerSvcStatusReply, error) {
	out := new(ServerSvcStatusReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) PostSession(ctx context.Context, in *PostSessionReq, opts ...grpc.CallOption) (*PostSessionReply, error) {
	out := new(PostSessionReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/PostSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSessions(ctx context.Context, in *GetSessionsReq, opts ...grpc.CallOption) (*GetSessionsReply, error) {
	out := new(GetSessionsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSessionsForInstructor(ctx context.Context, in *GetSessionsForInstructorReq, opts ...grpc.CallOption) (*GetSessionsForInstructorReply, error) {
	out := new(GetSessionsForInstructorReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSessionsForInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSessionsForFitnessType(ctx context.Context, in *GetSessionsForFitnessReq, opts ...grpc.CallOption) (*GetSessionsForFitnessReply, error) {
	out := new(GetSessionsForFitnessReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSessionsForFitnessType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionReply, error) {
	out := new(GetSessionReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) PostSessionPreviewVideo(ctx context.Context, in *PostSessionPreviewVideoReq, opts ...grpc.CallOption) (*PostSessionPreviewVideoReply, error) {
	out := new(PostSessionPreviewVideoReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/PostSessionPreviewVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollInstructor(ctx context.Context, in *EnrollInstructorReq, opts ...grpc.CallOption) (*EnrollInstructorReply, error) {
	out := new(EnrollInstructorReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetInstructor(ctx context.Context, in *GetInstructorReq, opts ...grpc.CallOption) (*GetInstructorReply, error) {
	out := new(GetInstructorReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetInstructor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetInstructors(ctx context.Context, in *GetInstructorsReq, opts ...grpc.CallOption) (*GetInstructorsReply, error) {
	out := new(GetInstructorsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetInstructors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) PostInstructorDisplayImg(ctx context.Context, in *PostInstructorDisplayImgReq, opts ...grpc.CallOption) (*PostInstructorDisplayImgReply, error) {
	out := new(PostInstructorDisplayImgReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/PostInstructorDisplayImg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) EnrollUser(ctx context.Context, in *EnrollUserReq, opts ...grpc.CallOption) (*EnrollUserReply, error) {
	out := new(EnrollUserReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/EnrollUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersReply, error) {
	out := new(GetUsersReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) SubscribeUser(ctx context.Context, in *SubscribeUserReq, opts ...grpc.CallOption) (*SubscribeUserReply, error) {
	out := new(SubscribeUserReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/SubscribeUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) RecordEvent(ctx context.Context, in *RecordEventReq, opts ...grpc.CallOption) (*RecordEventReply, error) {
	out := new(RecordEventReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/RecordEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverSvcClient) CleanupAllDBs(ctx context.Context, in *CleanupAllDBsReq, opts ...grpc.CallOption) (*CleanupAllDBsReply, error) {
	out := new(CleanupAllDBsReply)
	err := grpc.Invoke(ctx, "/serversvc.ServerSvc/CleanupAllDBs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerSvc service

type ServerSvcServer interface {
	// Is it running?
	// DONE
	GetStatus(context.Context, *ServerSvcStatusReq) (*ServerSvcStatusReply, error)
	// Session handling
	PostSession(context.Context, *PostSessionReq) (*PostSessionReply, error)
	GetSessions(context.Context, *GetSessionsReq) (*GetSessionsReply, error)
	GetSessionsForInstructor(context.Context, *GetSessionsForInstructorReq) (*GetSessionsForInstructorReply, error)
	GetSessionsForFitnessType(context.Context, *GetSessionsForFitnessReq) (*GetSessionsForFitnessReply, error)
	GetSession(context.Context, *GetSessionReq) (*GetSessionReply, error)
	// Post session preview
	PostSessionPreviewVideo(context.Context, *PostSessionPreviewVideoReq) (*PostSessionPreviewVideoReply, error)
	// Instructor handling
	EnrollInstructor(context.Context, *EnrollInstructorReq) (*EnrollInstructorReply, error)
	GetInstructor(context.Context, *GetInstructorReq) (*GetInstructorReply, error)
	GetInstructors(context.Context, *GetInstructorsReq) (*GetInstructorsReply, error)
	// Post a instructor pic
	PostInstructorDisplayImg(context.Context, *PostInstructorDisplayImgReq) (*PostInstructorDisplayImgReply, error)
	// User handling
	EnrollUser(context.Context, *EnrollUserReq) (*EnrollUserReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	GetUsers(context.Context, *GetUsersReq) (*GetUsersReply, error)
	// Subscribe to the pay plan TBD
	SubscribeUser(context.Context, *SubscribeUserReq) (*SubscribeUserReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// Used for analytics
	// Client will record much of the user interaction with the app
	RecordEvent(context.Context, *RecordEventReq) (*RecordEventReply, error)
	CleanupAllDBs(context.Context, *CleanupAllDBsReq) (*CleanupAllDBsReply, error)
}

func RegisterServerSvcServer(s *grpc.Server, srv ServerSvcServer) {
	s.RegisterService(&_ServerSvc_serviceDesc, srv)
}

func _ServerSvc_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerSvcStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetStatus(ctx, req.(*ServerSvcStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_PostSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).PostSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/PostSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).PostSession(ctx, req.(*PostSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSessions(ctx, req.(*GetSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSessionsForInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsForInstructorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSessionsForInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSessionsForInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSessionsForInstructor(ctx, req.(*GetSessionsForInstructorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSessionsForFitnessType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsForFitnessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSessionsForFitnessType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSessionsForFitnessType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSessionsForFitnessType(ctx, req.(*GetSessionsForFitnessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetSession(ctx, req.(*GetSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_PostSessionPreviewVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSessionPreviewVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).PostSessionPreviewVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/PostSessionPreviewVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).PostSessionPreviewVideo(ctx, req.(*PostSessionPreviewVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollInstructorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollInstructor(ctx, req.(*EnrollInstructorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetInstructor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetInstructor(ctx, req.(*GetInstructorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetInstructors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetInstructors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetInstructors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetInstructors(ctx, req.(*GetInstructorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_PostInstructorDisplayImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstructorDisplayImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).PostInstructorDisplayImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/PostInstructorDisplayImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).PostInstructorDisplayImg(ctx, req.(*PostInstructorDisplayImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/EnrollUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).EnrollUser(ctx, req.(*EnrollUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_SubscribeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).SubscribeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/SubscribeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).SubscribeUser(ctx, req.(*SubscribeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_RecordEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).RecordEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/RecordEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).RecordEvent(ctx, req.(*RecordEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerSvc_CleanupAllDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupAllDBsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSvcServer).CleanupAllDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serversvc.ServerSvc/CleanupAllDBs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSvcServer).CleanupAllDBs(ctx, req.(*CleanupAllDBsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serversvc.ServerSvc",
	HandlerType: (*ServerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ServerSvc_GetStatus_Handler,
		},
		{
			MethodName: "PostSession",
			Handler:    _ServerSvc_PostSession_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ServerSvc_GetSessions_Handler,
		},
		{
			MethodName: "GetSessionsForInstructor",
			Handler:    _ServerSvc_GetSessionsForInstructor_Handler,
		},
		{
			MethodName: "GetSessionsForFitnessType",
			Handler:    _ServerSvc_GetSessionsForFitnessType_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ServerSvc_GetSession_Handler,
		},
		{
			MethodName: "PostSessionPreviewVideo",
			Handler:    _ServerSvc_PostSessionPreviewVideo_Handler,
		},
		{
			MethodName: "EnrollInstructor",
			Handler:    _ServerSvc_EnrollInstructor_Handler,
		},
		{
			MethodName: "GetInstructor",
			Handler:    _ServerSvc_GetInstructor_Handler,
		},
		{
			MethodName: "GetInstructors",
			Handler:    _ServerSvc_GetInstructors_Handler,
		},
		{
			MethodName: "PostInstructorDisplayImg",
			Handler:    _ServerSvc_PostInstructorDisplayImg_Handler,
		},
		{
			MethodName: "EnrollUser",
			Handler:    _ServerSvc_EnrollUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ServerSvc_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _ServerSvc_GetUsers_Handler,
		},
		{
			MethodName: "SubscribeUser",
			Handler:    _ServerSvc_SubscribeUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ServerSvc_Login_Handler,
		},
		{
			MethodName: "RecordEvent",
			Handler:    _ServerSvc_RecordEvent_Handler,
		},
		{
			MethodName: "CleanupAllDBs",
			Handler:    _ServerSvc_CleanupAllDBs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverrpc.proto",
}

func init() { proto.RegisterFile("serverrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x19, 0x5d, 0x73, 0xdb, 0xc6,
	0xd1, 0xa4, 0x28, 0x89, 0x5c, 0xea, 0x03, 0x3e, 0x49, 0x09, 0x43, 0x7f, 0xc4, 0x83, 0x36, 0x8e,
	0x46, 0x9d, 0xca, 0x19, 0x77, 0x3a, 0x71, 0x5b, 0xb7, 0x53, 0x9a, 0x84, 0x24, 0xd4, 0x14, 0xa9,
	0x01, 0x49, 0xd9, 0xee, 0x8b, 0x86, 0x02, 0x21, 0x15, 0x13, 0x8a, 0x64, 0x40, 0x48, 0x09, 0x9f,
	0xfa, 0x92, 0xe9, 0x53, 0x67, 0xfa, 0xdc, 0xff, 0xd0, 0xfe, 0x8b, 0xbe, 0xd4, 0xfd, 0x01, 0xfd,
	0x3b, 0xdd, 0xbd, 0x3b, 0x00, 0x77, 0x20, 0x21, 0xd9, 0x93, 0xbe, 0x61, 0xf7, 0x76, 0xf7, 0xf6,
	0x7b, 0xf7, 0x48, 0xd8, 0x9c, 0x7a, 0xc1, 0x8d, 0x17, 0x04, 0x13, 0x77, 0x7f, 0x12, 0x8c, 0xc3,
	0x31, 0x2b, 0x09, 0xc4, 0xf4, 0xc6, 0x35, 0x77, 0x81, 0x75, 0x38, 0xd0, 0xb9, 0x71, 0x3b, 0x61,
	0x3f, 0xbc, 0x9e, 0x3a, 0xde, 0xb7, 0x8c, 0x41, 0x61, 0xd4, 0xbf, 0xf2, 0x2a, 0xb9, 0x27, 0xb9,
	0xdd, 0x92, 0xc3, 0xbf, 0xcd, 0xaf, 0x60, 0x7b, 0x8e, 0x72, 0x32, 0x9c, 0xb1, 0x0a, 0xac, 0x5e,
	0x79, 0xd3, 0x69, 0xff, 0x32, 0x22, 0x8f, 0x40, 0xf3, 0xfd, 0x12, 0x94, 0x3b, 0xf8, 0xed, 0x8f,
	0x47, 0xf6, 0xe8, 0x62, 0xcc, 0x9e, 0x40, 0x79, 0x2a, 0xc0, 0xae, 0x1f, 0x0b, 0x57, 0x51, 0x0a,
	0x45, 0xc3, 0x9b, 0xba, 0x95, 0xbc, 0x46, 0x41, 0x28, 0xb6, 0x07, 0x86, 0x3f, 0x9a, 0x86, 0xc1,
	0xb5, 0x1b, 0x8e, 0x03, 0x92, 0x6a, 0x37, 0x2a, 0x4b, 0x48, 0xb6, 0xec, 0xcc, 0xe1, 0xd9, 0xcb,
	0xe4, 0xbe, 0xd9, 0xc4, 0xab, 0x14, 0x90, 0x6c, 0xe3, 0x79, 0x75, 0x3f, 0x36, 0x7e, 0xff, 0xc0,
	0x0f, 0x47, 0x48, 0x50, 0xef, 0x87, 0xde, 0xe5, 0x38, 0x98, 0x39, 0x2a, 0x39, 0x3b, 0x80, 0xcd,
	0x81, 0x7f, 0x71, 0xe1, 0xbb, 0xd7, 0xc3, 0x70, 0xd6, 0xf4, 0x6e, 0xbc, 0x61, 0x65, 0x99, 0x4b,
	0x78, 0xa8, 0x48, 0x90, 0xe6, 0x35, 0x62, 0x42, 0x27, 0xcd, 0xc4, 0x9e, 0xc1, 0x6a, 0xd8, 0xbf,
	0x6c, 0xfa, 0xd3, 0xb0, 0xb2, 0xc2, 0xf9, 0x77, 0xe6, 0xf9, 0xbb, 0xfd, 0x4b, 0x27, 0xa2, 0x62,
	0x1b, 0x90, 0x47, 0xa3, 0x56, 0xb9, 0x51, 0x79, 0xbf, 0xc1, 0x9e, 0xc2, 0x46, 0x62, 0x5a, 0x8b,
	0xc2, 0x52, 0xe4, 0x7e, 0x49, 0x61, 0xd9, 0x2e, 0x6c, 0x4e, 0x02, 0xef, 0xc6, 0xf7, 0xbe, 0x3b,
	0xf5, 0x07, 0xde, 0xb8, 0x17, 0x0c, 0x2b, 0x25, 0x4e, 0x98, 0x46, 0xb3, 0xe7, 0xb0, 0x2d, 0x2d,
	0xed, 0xa1, 0x2a, 0x53, 0x6b, 0x14, 0x8c, 0x87, 0x43, 0x6f, 0x50, 0xf1, 0x90, 0xbc, 0xe0, 0x2c,
	0x3c, 0x33, 0x7f, 0xc8, 0x01, 0x38, 0x5c, 0x0c, 0x8f, 0xe5, 0x4b, 0x00, 0x21, 0x94, 0x1b, 0x96,
	0x7b, 0xb2, 0xb4, 0x5b, 0xd6, 0x1c, 0x93, 0x90, 0xca, 0x4f, 0x47, 0xa1, 0xaf, 0xbe, 0x80, 0x15,
	0x81, 0x65, 0x9f, 0xc0, 0x4a, 0xd0, 0x0f, 0xfd, 0xd1, 0x25, 0x4f, 0x87, 0xbc, 0x23, 0x21, 0x8e,
	0xe7, 0x14, 0x32, 0x09, 0x24, 0x64, 0xbe, 0x47, 0x35, 0xea, 0x81, 0x37, 0xf0, 0xc3, 0x7a, 0x3f,
	0x18, 0x50, 0xa2, 0xb6, 0x52, 0x89, 0x4a, 0xac, 0xad, 0xeb, 0xab, 0x73, 0x2f, 0x88, 0x58, 0x47,
	0x1c, 0xa2, 0xe4, 0xb2, 0xbe, 0x9f, 0xf8, 0xc1, 0xec, 0x78, 0x3c, 0x0a, 0xff, 0xc4, 0xb3, 0x06,
	0x93, 0xcb, 0x4b, 0x50, 0xec, 0x31, 0x80, 0xa0, 0x78, 0xe7, 0xf5, 0x03, 0x9e, 0x2f, 0x25, 0x07,
	0xbc, 0x18, 0xc3, 0x0c, 0x58, 0xaa, 0xd7, 0x4f, 0x79, 0x1a, 0x94, 0x9c, 0x25, 0xb7, 0x7e, 0xca,
	0x1e, 0x42, 0xc9, 0x9f, 0x36, 0xbc, 0x8b, 0x3e, 0xc6, 0x9b, 0x87, 0xb7, 0xe8, 0x24, 0x08, 0x92,
	0x77, 0x8d, 0x2e, 0x91, 0x69, 0x2a, 0x22, 0xaa, 0x60, 0xcc, 0xbf, 0xe6, 0xa0, 0xf8, 0xaa, 0x3f,
	0xfa, 0x86, 0x7b, 0x14, 0x89, 0x9d, 0xf1, 0x35, 0x19, 0x8f, 0xda, 0x4b, 0x83, 0x20, 0x88, 0x31,
	0x54, 0x67, 0x35, 0xd7, 0x0d, 0xe9, 0x50, 0xd8, 0xb5, 0xda, 0x17, 0x20, 0xab, 0x0a, 0x29, 0xdc,
	0x11, 0xc2, 0xaa, 0xe2, 0xb9, 0x84, 0x17, 0xd6, 0x4b, 0x61, 0x71, 0xbd, 0x98, 0x7f, 0x29, 0xc0,
	0x86, 0xad, 0x21, 0xc9, 0xbe, 0x0b, 0x3f, 0x98, 0x86, 0x8a, 0x93, 0x13, 0x04, 0xf9, 0x83, 0xca,
	0x5e, 0xa8, 0x43, 0x9f, 0x84, 0x99, 0x7a, 0xdf, 0x4b, 0x2d, 0xe8, 0x93, 0x94, 0x1b, 0x8e, 0x5d,
	0x0c, 0xea, 0x78, 0x24, 0x3d, 0x1a, 0xc3, 0x6c, 0x1b, 0x96, 0xbd, 0xab, 0xbe, 0x3f, 0x94, 0x1e,
	0x15, 0x00, 0x71, 0x4c, 0xfa, 0xd3, 0xe9, 0x9b, 0x71, 0x30, 0xe0, 0x3e, 0x43, 0x8e, 0x08, 0xa6,
	0x78, 0x0f, 0xa8, 0x33, 0x88, 0x0a, 0xe0, 0xdf, 0xec, 0xa7, 0xb0, 0xee, 0x7a, 0x41, 0xe8, 0x63,
	0xd5, 0x89, 0x6b, 0x44, 0xd6, 0xeb, 0x48, 0x6a, 0x06, 0x17, 0xa2, 0xdc, 0x79, 0x33, 0x80, 0xbb,
	0x9b, 0x81, 0x42, 0xce, 0xad, 0xe8, 0x4b, 0x37, 0x94, 0xa5, 0x15, 0x12, 0x26, 0x9d, 0x5c, 0x3f,
	0x9c, 0x55, 0xd6, 0x84, 0x4e, 0xf4, 0x4d, 0xc1, 0x72, 0xc7, 0xd7, 0xa3, 0x30, 0x98, 0x55, 0xd6,
	0x45, 0xb0, 0x24, 0x28, 0xab, 0x7b, 0x23, 0xae, 0x6e, 0x13, 0xd6, 0x06, 0xfe, 0x74, 0x32, 0xec,
	0xcf, 0xec, 0x2b, 0x72, 0xe6, 0x26, 0x9e, 0xac, 0x39, 0x1a, 0x8e, 0x82, 0xa8, 0xc2, 0xbc, 0x37,
	0x1a, 0x5c, 0xec, 0x1c, 0x9e, 0xe4, 0x05, 0x71, 0xed, 0xe1, 0x4d, 0x1e, 0xa7, 0xd3, 0x70, 0x94,
	0x6a, 0xe7, 0x32, 0xed, 0x90, 0xe2, 0x42, 0xa4, 0x5a, 0x82, 0x31, 0x1b, 0xb0, 0xd2, 0x40, 0x7a,
	0x97, 0xdb, 0x3d, 0xe0, 0x5f, 0x48, 0x27, 0xc2, 0x1f, 0xc3, 0x24, 0x45, 0x7c, 0x2b, 0xbd, 0x5a,
	0xc1, 0x98, 0x3f, 0xe4, 0xa1, 0xd8, 0x93, 0xc9, 0xfe, 0x7f, 0x48, 0xa4, 0xc8, 0xcd, 0x85, 0xc5,
	0x6e, 0x5e, 0xd6, 0xdd, 0x1c, 0xa7, 0xd6, 0x4a, 0x56, 0x6a, 0x15, 0x53, 0xa9, 0xa5, 0x86, 0xb8,
	0x94, 0x0a, 0xb1, 0x08, 0x1a, 0xc4, 0x41, 0xc3, 0x80, 0x38, 0x9e, 0x8b, 0x5c, 0x35, 0x37, 0xf4,
	0x6f, 0x50, 0x13, 0x3c, 0xbd, 0x14, 0x01, 0x09, 0x52, 0x78, 0xd3, 0x80, 0x8d, 0x43, 0x2f, 0x94,
	0x8d, 0x9e, 0xa6, 0xab, 0xf9, 0xb7, 0x1c, 0x18, 0x1a, 0x8a, 0xc6, 0xe8, 0x8b, 0x78, 0x58, 0x29,
	0x1d, 0xf5, 0x93, 0xf9, 0x51, 0x41, 0xde, 0x74, 0x54, 0x52, 0x56, 0x53, 0xe7, 0x03, 0x67, 0xce,
	0x73, 0xe6, 0xcf, 0x14, 0x66, 0xbd, 0xac, 0x9d, 0x14, 0x83, 0x69, 0xc3, 0x03, 0x45, 0xa1, 0x03,
	0xa2, 0x8a, 0xce, 0x69, 0x1d, 0x58, 0xd4, 0x44, 0x72, 0x19, 0x4d, 0xe4, 0x1d, 0x3c, 0xca, 0x16,
	0xf5, 0xa3, 0x0c, 0x35, 0xdf, 0x42, 0x45, 0x17, 0x2d, 0x4b, 0x96, 0x54, 0x14, 0xe5, 0x1d, 0x15,
	0x2f, 0xd7, 0xee, 0xee, 0xf2, 0x8e, 0x00, 0xf3, 0x14, 0xaa, 0x19, 0x92, 0x7f, 0x9c, 0xc6, 0xbf,
	0x85, 0xcd, 0x44, 0xae, 0x10, 0xb6, 0x07, 0x05, 0x1f, 0xe9, 0xb8, 0x86, 0xd9, 0x52, 0x38, 0x8d,
	0xf9, 0x0c, 0xd6, 0x55, 0xf6, 0x6f, 0xa9, 0xe4, 0xa4, 0xf8, 0xd7, 0xde, 0x4c, 0x86, 0x40, 0xc1,
	0x98, 0x2f, 0x61, 0xe3, 0x64, 0x3c, 0x55, 0x39, 0x3e, 0xe6, 0xba, 0xe7, 0x60, 0x68, 0xdc, 0xa4,
	0xee, 0x5d, 0x37, 0x9e, 0xc0, 0x96, 0x58, 0x11, 0xf4, 0x8c, 0xf9, 0x15, 0x40, 0x92, 0x19, 0xf2,
	0xf2, 0x5b, 0xf2, 0x51, 0x21, 0x46, 0x9f, 0xed, 0xcc, 0x4b, 0x24, 0x55, 0xb0, 0xcf, 0x27, 0x64,
	0x89, 0x36, 0x3a, 0xd2, 0x7c, 0xc1, 0x6b, 0x4b, 0xd7, 0xe6, 0xc3, 0x38, 0xeb, 0xc0, 0x52, 0x9c,
	0x74, 0xeb, 0xcf, 0x35, 0x07, 0xde, 0x62, 0x83, 0xf0, 0xe1, 0x16, 0xdc, 0xd7, 0x84, 0xf0, 0x82,
	0x7f, 0x0b, 0x5b, 0x69, 0x24, 0x89, 0x9e, 0x2f, 0xdc, 0xdc, 0xc7, 0x16, 0xee, 0x53, 0x00, 0x94,
	0x4c, 0x5d, 0x96, 0xec, 0xc4, 0x76, 0x48, 0xdb, 0x45, 0x62, 0x61, 0x04, 0x9a, 0x5f, 0xc3, 0x5a,
	0x4c, 0x47, 0x57, 0x7f, 0xa9, 0x59, 0xb5, 0xa5, 0x5c, 0x18, 0x75, 0x6c, 0x69, 0xcf, 0x0b, 0x58,
	0x17, 0xd1, 0x88, 0xee, 0x40, 0x4e, 0x12, 0x7a, 0x2b, 0x27, 0x11, 0x98, 0x3f, 0x83, 0x4d, 0x95,
	0x53, 0x3e, 0x15, 0x32, 0xf4, 0x5b, 0x87, 0xb2, 0xd4, 0x8f, 0x3b, 0xec, 0xf7, 0x3c, 0xf1, 0x25,
	0x48, 0x9c, 0xcf, 0xa0, 0x48, 0xa4, 0x8a, 0x93, 0x16, 0xde, 0x1c, 0x13, 0x61, 0x1b, 0x5a, 0xb6,
	0x6e, 0xbc, 0x51, 0x88, 0xbb, 0x6e, 0xc9, 0xa3, 0x0f, 0x3e, 0xf5, 0x45, 0x5b, 0xd8, 0x56, 0x58,
	0xad, 0xe8, 0xcc, 0x49, 0xc8, 0x68, 0x58, 0x71, 0x80, 0x0f, 0x36, 0x31, 0x6f, 0x12, 0x04, 0x2a,
	0xb7, 0xa1, 0x37, 0x7f, 0xb6, 0x2f, 0xe9, 0x15, 0xf5, 0x8c, 0xf4, 0x1d, 0x4e, 0x42, 0x82, 0x4e,
	0x95, 0x12, 0xc4, 0x09, 0x7a, 0xf5, 0x29, 0x8e, 0x2b, 0xfa, 0x96, 0x6e, 0x9d, 0xe7, 0x16, 0xc7,
	0x26, 0x8b, 0x06, 0x8f, 0xe4, 0x44, 0xdf, 0x60, 0xd1, 0x17, 0x9b, 0xe3, 0x4b, 0x9f, 0x97, 0x7b,
	0x3c, 0xf6, 0x72, 0x59, 0x63, 0x2f, 0xaf, 0x8f, 0x3d, 0xf3, 0xbf, 0xb8, 0x50, 0x4b, 0x76, 0x72,
	0xf4, 0x3e, 0x30, 0xf2, 0x61, 0x5b, 0x69, 0xdb, 0xf1, 0xe8, 0x5f, 0x70, 0xc2, 0x7e, 0x09, 0x30,
	0x41, 0x3d, 0xe5, 0x13, 0x2b, 0x3f, 0xf7, 0xc0, 0x39, 0xe1, 0x87, 0xce, 0x78, 0xe8, 0x39, 0x0a,
	0x61, 0x9c, 0x45, 0x4b, 0x77, 0x64, 0x51, 0xaa, 0x91, 0x14, 0x3e, 0xa6, 0x91, 0xb8, 0x60, 0x74,
	0xae, 0xcf, 0xa7, 0x6e, 0xe0, 0x9f, 0x7b, 0x51, 0xf6, 0xe2, 0xdb, 0x80, 0xef, 0xdf, 0xd1, 0xfc,
	0x92, 0x10, 0xfb, 0x1a, 0xca, 0x93, 0xfe, 0xec, 0x0a, 0x7d, 0x4a, 0xcf, 0x0a, 0x6e, 0x47, 0x59,
	0xb3, 0x23, 0x79, 0x73, 0x38, 0x2a, 0xa5, 0xb9, 0x8d, 0xef, 0x67, 0xfd, 0x12, 0x0a, 0xc9, 0xdf,
	0x73, 0xb0, 0xa9, 0x68, 0xc6, 0x97, 0x38, 0x4c, 0xfe, 0x89, 0xef, 0xf2, 0x94, 0x92, 0xef, 0x64,
	0x09, 0xd2, 0x78, 0xb5, 0xd3, 0xe3, 0x35, 0x9f, 0xf1, 0xa6, 0x15, 0x9b, 0xc8, 0x52, 0xbc, 0x89,
	0xe0, 0x56, 0x74, 0x3e, 0x1c, 0x9f, 0x73, 0xcf, 0xac, 0x39, 0xfc, 0x5b, 0x3e, 0x4a, 0xc4, 0x62,
	0xc8, 0xf7, 0x22, 0xf1, 0x28, 0x11, 0x08, 0xf3, 0x3b, 0x78, 0x40, 0x5d, 0x3e, 0xb9, 0xb1, 0x11,
	0xad, 0x90, 0x97, 0x1f, 0x39, 0xeb, 0xe3, 0xcb, 0xf3, 0xca, 0xe5, 0x8a, 0x99, 0x4b, 0x9a, 0x99,
	0xe6, 0xe7, 0xf0, 0x28, 0xfb, 0x62, 0xf2, 0xda, 0x09, 0xac, 0xc9, 0xd9, 0xc3, 0x5f, 0xaa, 0x24,
	0xea, 0xc6, 0x1f, 0xa8, 0x1e, 0x93, 0x20, 0x85, 0x11, 0x3f, 0xe9, 0x85, 0x2b, 0x9f, 0x78, 0x02,
	0x4a, 0x7b, 0xc7, 0x74, 0xa0, 0xaa, 0x4c, 0xb4, 0x13, 0xe5, 0x19, 0x4c, 0xa6, 0xa2, 0x9f, 0xe4,
	0x24, 0x8b, 0x6d, 0x4c, 0x10, 0x59, 0x77, 0x98, 0x8f, 0xe1, 0x61, 0xa6, 0x4c, 0xb2, 0x02, 0x4b,
	0xb4, 0x3e, 0xf4, 0xfa, 0xa3, 0xeb, 0x49, 0x6d, 0x38, 0x6c, 0xbc, 0xe2, 0xfd, 0x0c, 0xb3, 0x24,
	0x85, 0x43, 0xca, 0xbd, 0xaf, 0x00, 0x92, 0xf2, 0x60, 0xeb, 0x50, 0x72, 0xda, 0x4d, 0xeb, 0xac,
	0xd7, 0xb1, 0x1c, 0xe3, 0x1e, 0xdb, 0x82, 0x4d, 0x0e, 0xda, 0xad, 0x4e, 0xd7, 0xe9, 0xd5, 0xbb,
	0x6d, 0xc7, 0xc8, 0xed, 0xfd, 0x1a, 0xee, 0xcf, 0xfd, 0xe2, 0xc0, 0x8a, 0x50, 0xb0, 0x6a, 0x9d,
	0x77, 0xc8, 0xb3, 0x06, 0xc5, 0xe3, 0x76, 0xc3, 0x72, 0x6a, 0x5d, 0xcb, 0xc8, 0x91, 0xc0, 0x86,
	0x7d, 0x70, 0x60, 0xd7, 0x7b, 0xcd, 0xae, 0x91, 0xdf, 0x6b, 0x03, 0x24, 0xbf, 0x36, 0x10, 0xd3,
	0x41, 0xad, 0xd3, 0x15, 0x4c, 0x8e, 0xd5, 0xac, 0xbd, 0xb5, 0x5b, 0x87, 0xc8, 0x54, 0x86, 0xd5,
	0x7a, 0xad, 0x79, 0x4c, 0x40, 0x9e, 0x80, 0x9a, 0xe5, 0xb4, 0x5f, 0xd9, 0x75, 0x63, 0x89, 0x6d,
	0x42, 0xb9, 0x59, 0xeb, 0xda, 0xad, 0xb3, 0xe3, 0x5e, 0x07, 0x11, 0x85, 0xbd, 0x7f, 0x60, 0x92,
	0xa7, 0xb6, 0x2a, 0x12, 0xdb, 0x6a, 0xb7, 0x2c, 0x14, 0x8b, 0x5f, 0xef, 0xda, 0x87, 0x35, 0x03,
	0x30, 0x28, 0x70, 0x54, 0xeb, 0x1e, 0xd5, 0xce, 0x38, 0x5c, 0xc6, 0xac, 0xd9, 0x78, 0xdd, 0x6b,
	0x35, 0x6a, 0x4d, 0xbb, 0x65, 0x0b, 0xdc, 0x1a, 0xe9, 0x4a, 0xea, 0x08, 0x70, 0x9d, 0x58, 0x8e,
	0xad, 0x86, 0xdd, 0xc5, 0xfb, 0xda, 0x2d, 0xc3, 0x63, 0xf7, 0x61, 0xbd, 0x7b, 0x7c, 0xa6, 0xa0,
	0x2e, 0x18, 0xc0, 0x72, 0xa3, 0xd6, 0xaa, 0x5b, 0xc6, 0xbf, 0x73, 0x68, 0xc2, 0xea, 0x91, 0x7d,
	0x72, 0x76, 0xd4, 0x3e, 0x31, 0xde, 0xe7, 0xe8, 0xe4, 0x8f, 0xbd, 0xe3, 0x57, 0x35, 0xe3, 0x3f,
	0x39, 0x56, 0x82, 0xc2, 0x91, 0x6d, 0x77, 0x8d, 0x7f, 0xe6, 0xf7, 0xfe, 0x0c, 0xa5, 0xb8, 0xd9,
	0x73, 0x63, 0xda, 0x87, 0x68, 0x8c, 0x75, 0x6a, 0xb5, 0xc8, 0x0b, 0x06, 0xac, 0x21, 0xa2, 0xdd,
	0xeb, 0x4a, 0x4c, 0x8e, 0x48, 0x1a, 0xd6, 0xa9, 0x5d, 0xe7, 0x11, 0x69, 0xa0, 0x37, 0x90, 0xe4,
	0x0f, 0x6d, 0x64, 0xe9, 0x58, 0x9d, 0x8e, 0x50, 0x6b, 0x07, 0xee, 0x1f, 0xb4, 0x9b, 0xcd, 0xf6,
	0x1b, 0x35, 0x4a, 0x17, 0x88, 0x36, 0x9a, 0xf6, 0x6b, 0xeb, 0xec, 0xc4, 0x41, 0xca, 0xb3, 0x37,
	0xb5, 0x6e, 0xfd, 0x08, 0xb5, 0x7c, 0xfe, 0xaf, 0x32, 0x94, 0xe2, 0x5f, 0xd0, 0xd8, 0x31, 0x94,
	0x68, 0xb7, 0xe3, 0x3f, 0xa4, 0xb1, 0x47, 0xda, 0x5e, 0x96, 0xfe, 0x39, 0xae, 0xfa, 0xf9, 0x6d,
	0xc7, 0x94, 0x73, 0xf7, 0xd8, 0x21, 0x94, 0x95, 0xac, 0x64, 0x6a, 0x8b, 0xd4, 0x37, 0xc2, 0xea,
	0x83, 0xac, 0xa3, 0x58, 0x90, 0xb2, 0x0a, 0x6b, 0x82, 0xf4, 0x67, 0x8c, 0x26, 0x28, 0xfd, 0x9c,
	0x41, 0x41, 0xa3, 0xf4, 0xb6, 0x9e, 0x14, 0x3e, 0x7b, 0xba, 0x98, 0x35, 0xfd, 0xf0, 0xa8, 0xee,
	0x7e, 0x10, 0x9d, 0xb8, 0xcf, 0x87, 0xcf, 0x16, 0xee, 0xf0, 0x3c, 0xde, 0x3f, 0xc9, 0x14, 0x94,
	0xbc, 0x21, 0xaa, 0x5f, 0xdc, 0x4d, 0x24, 0xae, 0x6a, 0xf0, 0xad, 0x2b, 0xf2, 0x75, 0x65, 0x21,
	0x1b, 0x09, 0xac, 0x66, 0x9c, 0x08, 0x29, 0xdf, 0xc0, 0xa7, 0x19, 0x8d, 0x84, 0x7d, 0xb1, 0x38,
	0x46, 0xa9, 0x06, 0x56, 0xfd, 0xf2, 0x43, 0xc8, 0xc4, 0x65, 0xa7, 0x60, 0xa4, 0xb7, 0x6a, 0xf6,
	0x58, 0xdd, 0x32, 0xe6, 0x97, 0xf8, 0xea, 0x93, 0x5b, 0xcf, 0x85, 0xdc, 0x63, 0xbe, 0xa9, 0x29,
	0x42, 0x53, 0x59, 0xa1, 0x4b, 0x7c, 0x94, 0x7d, 0x28, 0xc4, 0x9d, 0xf0, 0xc7, 0xb2, 0xb2, 0x29,
	0xb3, 0x87, 0x59, 0x2c, 0x3c, 0x64, 0x8f, 0x6f, 0x39, 0x8d, 0xd3, 0x30, 0x6b, 0xea, 0x68, 0x69,
	0x78, 0xcb, 0x4c, 0xd4, 0xd2, 0xf0, 0xf6, 0x11, 0xc6, 0x73, 0x23, 0x59, 0x7b, 0xb5, 0xdc, 0xd0,
	0xf6, 0x68, 0x2d, 0x37, 0x52, 0x7b, 0x32, 0x4a, 0xf9, 0x0d, 0xac, 0xca, 0x05, 0x98, 0xed, 0xe8,
	0x26, 0x46, 0xfc, 0x9f, 0x2e, 0x42, 0x0b, 0xe6, 0xdf, 0x41, 0x31, 0xda, 0x9e, 0xd9, 0x27, 0xf3,
	0x64, 0xdc, 0x71, 0x95, 0x85, 0xf8, 0x38, 0xa6, 0xda, 0x4e, 0xa3, 0xc5, 0x34, 0xbd, 0x52, 0x69,
	0x31, 0x5d, 0xb0, 0x0a, 0xdd, 0xc3, 0x15, 0x71, 0x99, 0x2f, 0x98, 0x4c, 0x5d, 0xf3, 0xa2, 0x8d,
	0xb5, 0xba, 0x33, 0x8f, 0x8c, 0x1b, 0x91, 0xb2, 0xea, 0x6a, 0x8d, 0x48, 0x5f, 0x9e, 0xb5, 0x46,
	0x34, 0xb7, 0x1d, 0x73, 0x73, 0xb4, 0xe1, 0xab, 0x99, 0x93, 0x1e, 0xd5, 0x9a, 0x39, 0xf3, 0x33,
	0xdb, 0xbc, 0x77, 0xbe, 0xc2, 0xff, 0x43, 0xf9, 0xc5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xd3, 0x93, 0x75, 0x56, 0x19, 0x00, 0x00,
}
